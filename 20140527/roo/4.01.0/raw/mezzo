++ opam install mezzo -e ubuntu
+ depext=
+ echo Ubuntu depexts:
+ '[' '' '!=' '' ']'
Ubuntu depexts:
++ opam install mezzo -e source,linux
+ srcext=
+ echo Ubuntu srcexts:
+ '[' '' '!=' '' ']'
+ opam install mezzo
Ubuntu srcexts:
The following actions will be performed:
 - install fix.20130611 [required by mezzo]
 - install pprint.20140424 [required by mezzo]
 - install menhir.20130912 [required by mezzo]
 - install cppo.0.9.3 [required by mezzo]
 - install functory.0.5 [required by mezzo]
 - install camlp4.4.01.0 [required by mezzo]
 - install easy-format.1.0.2 [required by mezzo]
 - install ulex.1.1 [required by mezzo]
 - install biniou.1.0.9 [required by mezzo]
 - install yojson.1.1.8 [required by mezzo]
 - install mezzo.0.0.m8
11 to install | 0 to reinstall | 0 to upgrade | 0 to downgrade | 0 to remove

=-=-= Installing camlp4.4.01.0 =-=-=
Installing camlp4.4.01.0.

=-=-= Installing cppo.0.9.3 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/cppo.0.9.3+opam.tar.gz
sending incremental file list
cppo.0.9.3+opam.tar.gz

sent 20,254 bytes  received 35 bytes  40,578.00 bytes/sec
total size is 20,123  speedup is 0.99
Building cppo.0.9.3:
  make
echo 'let cppo_version = "0.9.3"' > cppo_version.ml
ocamlyacc cppo_parser.mly
ocamllex cppo_lexer.mll
354 states, 13186 transitions, table size 54868 bytes
3462 additional bytes used for bindings
ocamlopt -o cppo -dtypes unix.cmxa cppo_version.ml cppo_types.ml cppo_parser.mli cppo_parser.ml cppo_lexer.ml cppo_command.ml cppo_eval.ml cppo_main.ml
Installing cppo.0.9.3.

=-=-= Installing easy-format.1.0.2 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/easy-format.1.0.2+opam.tar.gz
sending incremental file list
easy-format.1.0.2+opam.tar.gz

sent 13,718 bytes  received 35 bytes  27,506.00 bytes/sec
total size is 13,580  speedup is 0.99
Building easy-format.1.0.2:
  make
  make install
ocamlc -c easy_format.mli
ocamlc -c -dtypes easy_format.ml
touch bytecode
ocamlc -c easy_format.mli
ocamlopt -c -dtypes easy_format.ml
ocamlopt -I . -shared -linkall -o easy_format.cmxs easy_format.cmx
touch nativecode
echo "version = \"1.0.2\"" > META; cat META.tpl >> META
INSTALL_FILES="META easy_format.cmi easy_format.mli"; \
		if test -f bytecode; then \
		  INSTALL_FILES="$INSTALL_FILES easy_format.cmo"; \
		fi; \
		if test -f nativecode; then \
		  INSTALL_FILES="$INSTALL_FILES easy_format.cmx easy_format.o easy_format.cmxs"; \
		fi; \
		ocamlfind install easy-format $INSTALL_FILES
Installed /home/opam/.opam/system/lib/easy-format/easy_format.cmxs
Installed /home/opam/.opam/system/lib/easy-format/easy_format.o
Installed /home/opam/.opam/system/lib/easy-format/easy_format.cmx
Installed /home/opam/.opam/system/lib/easy-format/easy_format.cmo
Installed /home/opam/.opam/system/lib/easy-format/easy_format.mli
Installed /home/opam/.opam/system/lib/easy-format/easy_format.cmi
Installed /home/opam/.opam/system/lib/easy-format/META
Installing easy-format.1.0.2.

=-=-= Installing fix.20130611 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/fix.20130611+opam.tar.gz
sending incremental file list
fix.20130611+opam.tar.gz

sent 14,912 bytes  received 35 bytes  29,894.00 bytes/sec
total size is 14,779  speedup is 0.99
Building fix.20130611:
  make
  make install
ocamlbuild -use-ocamlfind -cflags "-g" -lflags "-g" -classic-display Fix.cma Fix.cmxa
ocamlfind ocamldep -modules Fix.mli > Fix.mli.depends
ocamlfind ocamlc -c -g -o Fix.cmi Fix.mli
ocamlfind ocamldep -modules Fix.ml > Fix.ml.depends
ocamlfind ocamlc -c -g -o Fix.cmo Fix.ml
ocamlfind ocamlc -a -g Fix.cmo -o Fix.cma
ocamlfind ocamlopt -c -g -o Fix.cmx Fix.ml
ocamlfind ocamlopt -a -g Fix.cmx -o Fix.cmxa
ocamlbuild -use-ocamlfind -cflags "-g" -lflags "-g" -classic-display Fix.cma Fix.cmxa
ocamlfind install fix META \
	  _build/Fix.cma _build/Fix.cmxa \
	  _build/Fix.a \
	  _build/Fix.cmx _build/Fix.cmi
Installed /home/opam/.opam/system/lib/fix/Fix.cmi
Installed /home/opam/.opam/system/lib/fix/Fix.cmx
Installed /home/opam/.opam/system/lib/fix/Fix.a
Installed /home/opam/.opam/system/lib/fix/Fix.cmxa
Installed /home/opam/.opam/system/lib/fix/Fix.cma
Installed /home/opam/.opam/system/lib/fix/META
Installing fix.20130611.

=-=-= Installing functory.0.5 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/functory.0.5+opam.tar.gz
sending incremental file list
functory.0.5+opam.tar.gz

sent 78,413 bytes  received 35 bytes  156,896.00 bytes/sec
total size is 78,268  speedup is 1.00
Building functory.0.5:
  ./configure
  make
  make ocamlfind-install
checking for ocamlc... ocamlc
ocaml version is 4.01.0
ocaml library path is /usr/lib/ocaml
checking for ocamlopt... ocamlopt
checking ocamlopt version... ok
checking for ocamlc.opt... ocamlc.opt
checking ocamlc.opt version... ok
checking for ocamlopt.opt... ocamlopt.opt
checking ocamlc.opt version... ok
checking for ocamldep... ocamldep
checking for ocamldep.opt... ocamldep.opt
checking for ocamllex... ocamllex
checking for ocamllex.opt... ocamllex.opt
checking for ocamlyacc... ocamlyacc
checking for ocamlweb... true
checking platform... configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  'Makefile.in' seems to ignore the --datarootdir setting
echo "let version = \""0.5"\"" > version.ml
echo "let date = \""`date`"\"" >> version.ml
rm -f .depend
ocamldep.opt  *.ml *.mli > .depend
ocamlc.opt -c -dtypes -g  control.ml
ocamlc.opt -c -dtypes -g  sequential.ml
ocamlc.opt -c -dtypes -g  map_fold.ml
ocamlc.opt -c -dtypes -g  cores.ml
ocamlc.opt -c -dtypes -g  binary.mli
ocamlc.opt -c -dtypes -g  binary.ml
ocamlc.opt -c -dtypes -g  protocol.mli
ocamlc.opt -c -dtypes -g  protocol.ml
ocamlc.opt -c -dtypes -g  network.ml
ocamlc.opt -c -dtypes -g  functory.mli
ocamlc.opt -dtypes -g  -pack -o functory.cmo control.cmo sequential.cmo map_fold.cmo cores.cmo binary.cmo protocol.cmo network.cmo 
ocamlc.opt -a -dtypes -g  -o functory.cma functory.cmo
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory control.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory sequential.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory map_fold.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory cores.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory binary.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory protocol.ml
ocamlopt.opt -g -annot -c -dtypes  -for-pack Functory network.ml
ocamlopt.opt -g -annot  -pack -o functory.cmx control.cmx sequential.cmx map_fold.cmx cores.cmx binary.cmx protocol.cmx network.cmx
ocamlopt.opt -g -annot -a -dtypes  -for-pack Functory -o functory.cmxa functory.cmx
ocamlfind install functory META functory.cmi functory.cma functory.cmxa functory.a
Installed /home/opam/.opam/system/lib/functory/functory.a
Installed /home/opam/.opam/system/lib/functory/functory.cmxa
Installed /home/opam/.opam/system/lib/functory/functory.cma
Installed /home/opam/.opam/system/lib/functory/functory.cmi
Installed /home/opam/.opam/system/lib/functory/META
Installing functory.0.5.

=-=-= Installing menhir.20130912 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/menhir.20130912+opam.tar.gz
sending incremental file list
menhir.20130912+opam.tar.gz

sent 547,371 bytes  received 35 bytes  1,094,812.00 bytes/sec
total size is 547,111  speedup is 1.00
Building menhir.20130912:
  make install PREFIX=/home/opam/.opam/system docdir=/home/opam/.opam/system/doc/menhir libdir=/home/opam/.opam/system/lib/menhir mandir=/home/opam/.opam/system/man/man1
rm -f src/installation.ml
echo "let libdir = \"/home/opam/.opam/system/lib/menhir\"" > src/installation.ml
if ocamlfind ocamlc -v >/dev/null 2>&1 ; then \
	  echo "let ocamlfind = true" >> src/installation.ml ; \
	else \
	  echo "let ocamlfind = false" >> src/installation.ml ; \
	fi
make -C src library bootstrap
make[1]: Entering directory `/home/opam/.opam/system/build/menhir.20130912/src'
ocamlbuild -classic-display -use-ocamlfind -j 0 menhirLib.cmo menhirLib.cmx
ocamlfind ocamlopt unix.cmxa -I /usr/lib/ocaml/ocamlbuild /usr/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa -linkpkg myocamlbuild.ml /usr/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
