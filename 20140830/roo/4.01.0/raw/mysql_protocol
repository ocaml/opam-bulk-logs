++ opam install mysql_protocol -e ubuntu
+ depext='time zlib1g-dev'
+ echo Ubuntu depexts: time zlib1g-dev
+ '[' 'time zlib1g-dev' '!=' '' ']'
+ sudo apt-get install -qq -y build-essential m4
Ubuntu depexts: time zlib1g-dev
+ sudo apt-get install -qq -y time zlib1g-dev
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (This frontend requires a controlling tty.)
debconf: falling back to frontend: Teletype
dpkg-preconfigure: unable to re-open stdin: 
Selecting previously unselected package time.
(Reading database ... 20147 files and directories currently installed.)
Preparing to unpack .../archives/time_1.7-24_amd64.deb ...
Unpacking time (1.7-24) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../zlib1g-dev_1%3a1.2.8.dfsg-1ubuntu1_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.8.dfsg-1ubuntu1) ...
Setting up time (1.7-24) ...
Setting up zlib1g-dev:amd64 (1:1.2.8.dfsg-1ubuntu1) ...
++ opam install mysql_protocol -e source,linux
+ srcext=
+ echo Ubuntu srcexts:
+ '[' '' '!=' '' ']'
+ opam install mysql_protocol
Ubuntu srcexts:
The following actions will be performed:
 - install   cryptokit.1.9                         [required by mysql_protocol]
 - install   camlp4.4.01.0                         [required by bitstring]
 - install   bitstring.2.0.4                       [required by mysql_protocol]
 - install   mysql_protocol.0.9
=== 4 to install ===

=-=- Synchronizing package archives -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
[default] Synchronizing with /home/opam/opam-repository/archives/bitstring.2.0.4+opam.tar.gz
[default] Synchronizing with /home/opam/opam-repository/archives/cryptokit.1.9+opam.tar.gz
[default] Synchronizing with /home/opam/opam-repository/archives/mysql_protocol.0.9+opam.tar.gz
sending incremental file list
bitstring.2.0.4+opam.tar.gz
sending incremental file list
sending incremental file list
cryptokit.1.9+opam.tar.gz
mysql_protocol.0.9+opam.tar.gz

sent 163,226 bytes  received 35 bytes  326,522.00 bytes/sec
total size is 163,062  speedup is 1.00

sent 142,919 bytes  received 35 bytes  285,908.00 bytes/sec
total size is 142,757  speedup is 1.00

sent 3,560,476 bytes  received 35 bytes  7,121,022.00 bytes/sec
total size is 3,559,477  speedup is 1.00

=-=- Installing packages =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Installing camlp4.4.01.0.
Building cryptokit.1.9:
  make
  make install
ocaml setup.ml -configure 

Configuration: 
ocamlfind: ........................................... /home/opam/.opam/4.01.0/bin/ocamlfind
ocamlc: .............................................. /home/opam/.opam/4.01.0/bin/ocamlc.opt
ocamlopt: ............................................ /home/opam/.opam/4.01.0/bin/ocamlopt.opt
ocamlbuild: .......................................... /home/opam/.opam/4.01.0/bin/ocamlbuild
Package name: ........................................ cryptokit
Package version: ..................................... 1.9
os_type: ............................................. Unix
system: .............................................. linux
architecture: ........................................ amd64
ccomp_type: .......................................... cc
ocaml_version: ....................................... 4.01.0
standard_library_default: ............................ /home/opam/.opam/4.01.0/lib/ocaml
standard_library: .................................... /home/opam/.opam/4.01.0/lib/ocaml
standard_runtime: .................................... /home/opam/.opam/4.01.0/bin/ocamlrun
bytecomp_c_compiler: ................................. gcc -fno-defer-pop -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT -fPIC
native_c_compiler: ................................... gcc -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT
model: ............................................... default
ext_obj: ............................................. .o
ext_asm: ............................................. .s
ext_lib: ............................................. .a
ext_dll: ............................................. .so
default_executable_name: ............................. a.out
systhread_supported: ................................. true
Install architecture-independent files dir: .......... /usr/local
Install architecture-dependent files in dir: ......... $prefix
User executables: .................................... $exec_prefix/bin
System admin executables: ............................ $exec_prefix/sbin
Program executables: ................................. $exec_prefix/libexec
Read-only single-machine data: ....................... $prefix/etc
Modifiable architecture-independent data: ............ $prefix/com
Modifiable single-machine data: ...................... $prefix/var
Object code libraries: ............................... $exec_prefix/lib
Read-only arch-independent data root: ................ $prefix/share
Read-only architecture-independent data: ............. $datarootdir
Info documentation: .................................. $datarootdir/info
Locale-dependent data: ............................... $datarootdir/locale
Man documentation: ................................... $datarootdir/man
Documentation root: .................................. $datarootdir/doc/$pkg_name
HTML documentation: .................................. $docdir
DVI documentation: ................................... $docdir
PDF documentation: ................................... $docdir
PS documentation: .................................... $docdir
findlib_version: ..................................... 1.5.2
is_native: ........................................... true
suffix_program: ...................................... 
Remove a file.: ...................................... rm -f
Remove a directory.: ................................. rm -rf
Turn ocaml debug flag on: ............................ true
Turn ocaml profile flag on: .......................... false
Compiler support generation of .cmxs.: ............... true
OCamlbuild additional flags: ......................... 
Define include path for zlib.: ....................... 
Define library path for zlib.: ....................... 
Enable ZLib: ......................................... true
Build and run benchmark: ............................. false
Create documentations: ............................... true
Compile tests executable and library and run them: ... false
ocamldoc: ............................................ /home/opam/.opam/4.01.0/bin/ocamldoc
pkg_unix: ............................................ /home/opam/.opam/4.01.0/lib/ocaml
pkg_num: ............................................. /home/opam/.opam/4.01.0/lib/num

ocaml setup.ml -build -classic-display
/home/opam/.opam/4.01.0/bin/ocamlopt.opt unix.cmxa -I /home/opam/.opam/4.01.0/lib/ocaml/ocamlbuild /home/opam/.opam/4.01.0/lib/ocaml/ocamlbuild/ocamlbuildlib.cmxa myocamlbuild.ml /home/opam/.opam/4.01.0/lib/ocaml/ocamlbuild/ocamlbuild.cmx -o myocamlbuild
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/arcfour.c
mv arcfour.o src/arcfour.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-arcfour.c
mv stubs-arcfour.o src/stubs-arcfour.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/blowfish.c
mv blowfish.o src/blowfish.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-blowfish.c
mv stubs-blowfish.o src/stubs-blowfish.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/d3des.c
mv d3des.o src/d3des.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-des.c
mv stubs-des.o src/stubs-des.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/rijndael-alg-fst.c
mv rijndael-alg-fst.o src/rijndael-alg-fst.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/ripemd160.c
mv ripemd160.o src/ripemd160.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-ripemd160.c
mv stubs-ripemd160.o src/stubs-ripemd160.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/sha1.c
mv sha1.o src/sha1.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-sha1.c
mv stubs-sha1.o src/stubs-sha1.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/sha256.c
mv sha256.o src/sha256.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-sha256.c
mv stubs-sha256.o src/stubs-sha256.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-aes.c
mv stubs-aes.o src/stubs-aes.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-md5.c
mv stubs-md5.o src/stubs-md5.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-misc.c
mv stubs-misc.o src/stubs-misc.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-rng.c
mv stubs-rng.o src/stubs-rng.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-zlib.c
+ ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-zlib.c
src/stubs-zlib.c: In function 'caml_zlib_deflate':
src/stubs-zlib.c:98:15: warning: pointer targets in assignment differ in signedness [-Wpointer-sign]
   zs->next_in = &Byte(srcbuf, Long_val(srcpos));
               ^
src/stubs-zlib.c:100:16: warning: pointer targets in assignment differ in signedness [-Wpointer-sign]
   zs->next_out = &Byte(dstbuf, Long_val(dstpos));
                ^
src/stubs-zlib.c: In function 'caml_zlib_inflate':
src/stubs-zlib.c:143:15: warning: pointer targets in assignment differ in signedness [-Wpointer-sign]
   zs->next_in = &Byte(srcbuf, Long_val(srcpos));
               ^
src/stubs-zlib.c:145:16: warning: pointer targets in assignment differ in signedness [-Wpointer-sign]
   zs->next_out = &Byte(dstbuf, Long_val(dstpos));
                ^
mv stubs-zlib.o src/stubs-zlib.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/keccak.c
mv keccak.o src/keccak.o
ocamlfind ocamlc -ccopt -O -ccopt -DHAVE_ZLIB -c src/stubs-sha3.c
mv stubs-sha3.o src/stubs-sha3.o
/home/opam/.opam/4.01.0/bin/ocamlmklib -o src/cryptokit_stubs -lz src/arcfour.o src/stubs-arcfour.o src/blowfish.o src/stubs-blowfish.o src/d3des.o src/stubs-des.o src/rijndael-alg-fst.o src/ripemd160.o src/stubs-ripemd160.o src/sha1.o src/stubs-sha1.o src/sha256.o src/stubs-sha256.o src/stubs-aes.o src/stubs-md5.o src/stubs-misc.o src/stubs-rng.o src/stubs-zlib.o src/keccak.o src/stubs-sha3.o
ocamlfind ocamldep -package num -package unix -modules src/cryptokit.mli > src/cryptokit.mli.depends
ocamlfind ocamlc -c -g -ccopt -O -ccopt -DHAVE_ZLIB -package num -package unix -I src -o src/cryptokit.cmi src/cryptokit.mli
ocamlfind ocamldep -package num -package unix -modules src/cryptokit.ml > src/cryptokit.ml.depends
ocamlfind ocamlc -c -g -ccopt -O -ccopt -DHAVE_ZLIB -package num -package unix -I src -o src/cryptokit.cmo src/cryptokit.ml
+ ocamlfind ocamlc -c -g -ccopt -O -ccopt -DHAVE_ZLIB -package num -package unix -I src -o src/cryptokit.cmo src/cryptokit.ml
File "src/cryptokit.ml", line 1930, characters 19-21:
Warning 3: deprecated feature: operator (or); you should use (||) instead
ocamlfind ocamlc -a -dllib -lcryptokit_stubs -cclib -lcryptokit_stubs -cclib -lz src/cryptokit.cmo -o src/cryptokit.cma
ocamlfind ocamlopt -c -g -ccopt -O -ccopt -DHAVE_ZLIB -package num -package unix -I src -o src/cryptokit.cmx src/cryptokit.ml
+ ocamlfind ocamlopt -c -g -ccopt -O -ccopt -DHAVE_ZLIB -package num -package unix -I src -o src/cryptokit.cmx src/cryptokit.ml
File "src/cryptokit.ml", line 1930, characters 19-21:
Warning 3: deprecated feature: operator (or); you should use (||) instead
ocamlfind ocamlopt -a -cclib -lcryptokit_stubs -cclib -lz src/cryptokit.cmx -o src/cryptokit.cmxa
ocamlfind ocamlopt -shared -cclib -lcryptokit_stubs -I src src/cryptokit.cmx -o src/cryptokit.cmxs
ocaml setup.ml -install 
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.mli
Installed /home/opam/.opam/4.01.0/lib/cryptokit/libcryptokit_stubs.a
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.cma
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.cmxa
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.a
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.cmxs
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.cmi
Installed /home/opam/.opam/4.01.0/lib/cryptokit/cryptokit.cmx
Installed /home/opam/.opam/4.01.0/lib/cryptokit/META
Installed /home/opam/.opam/4.01.0/lib/stublibs/dllcryptokit_stubs.so
Installed /home/opam/.opam/4.01.0/lib/stublibs/dllcryptokit_stubs.so.owner
ocamlfind: [WARNING] You have installed DLLs but the directory /home/opam/.opam/4.01.0/lib/stublibs is not mentioned in ld.conf
Installing cryptokit.1.9.
Building bitstring.2.0.4:
  ./configure --prefix /home/opam/.opam/4.01.0
  make srcdir=./
  make install
checking for a sed that does not truncate output... /bin/sed
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for a BSD-compatible install... /usr/bin/install -c
checking how to run the C preprocessor... gcc -E
checking for function prototypes... yes
checking whether gcc and cc understand -c and -o together... yes
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking whether byte ordering is bigendian... no
checking byteswap.h usability... yes
checking byteswap.h presence... yes
checking for byteswap.h... yes
checking for ocamlc... ocamlc
OCaml version is 4.01.0
OCaml library path is /home/opam/.opam/4.01.0/lib/ocaml
checking for ocamlopt... ocamlopt
checking for ocamlc.opt... ocamlc.opt
checking for ocamlopt.opt... ocamlopt.opt
checking for ocaml... ocaml
checking for ocamldep... ocamldep
checking for ocamlmktop... ocamlmktop
checking for ocamlmklib... ocamlmklib
checking for ocamldoc... ocamldoc
checking for ocamlbuild... ocamlbuild
checking for ocamlfind... ocamlfind
checking for camlp4of.opt... camlp4of.opt
checking for OCaml findlib package extlib... not found
checking for OCaml findlib package cil... not found
checking for time... /usr/bin/time
checking for diff... /usr/bin/diff
checking for gprof... gprof
checking for bisect-report... no
configure: creating ./config.status
config.status: creating Makefile
config.status: creating META
config.status: creating bitstring_config.ml
config.status: creating cil-tools/Makefile
config.status: creating config.h
ocamlfind ocamlc -g  -c bitstring_types.ml
ocamlfind ocamlc -g  -c bitstring_config.ml
gcc -g -O2 -Wall -Werror -fPIC -I. -I/home/opam/.opam/4.01.0/lib/ocaml   -c -o bitstring_c.o bitstring_c.c
ocamlfind ocamlc -g  -c bitstring.mli
ocamlfind ocamlc -g  -c bitstring.ml
ocamlfind ocamlc -g  -c bitmatch.ml
ocamlmklib -o bitstring bitstring_types.cmo bitstring_config.cmo bitstring_c.o bitstring.cmo bitmatch.cmo
ocamlfind ocamlc -g  \
	  -I +camlp4 -pp camlp4of -c bitstring_persistent.mli
ocamlfind ocamlc -g  \
	  -I +camlp4 -pp camlp4of -c bitstring_persistent.ml
ocamlfind ocamlc -a -o bitstring_persistent.cma bitstring_persistent.cmo
ocamlfind ocamlopt   -c bitstring_types.ml
ocamlfind ocamlopt   -c bitstring_config.ml
ocamlfind ocamlopt   -c bitstring.ml
ocamlfind ocamlopt   -c bitmatch.ml
ocamlmklib -o bitstring bitstring_types.cmx bitstring_config.cmx bitstring_c.o bitstring.cmx bitmatch.cmx
ocamlfind ocamlopt   \
	  -I +camlp4 -pp camlp4of -c bitstring_persistent.ml
ocamlfind ocamlopt -a -o bitstring_persistent.cmxa bitstring_persistent.cmx
ocamlfind ocamlc bitstring.cma -I +camlp4 dynlink.cma camlp4lib.cma \
	  -pp camlp4of -c pa_bitstring.ml -o pa_bitstring.cmo
ocamlfind ocamlc -g  -c bitstring_objinfo.ml
ocamlfind ocamlc -I +camlp4 unix.cma dynlink.cma camlp4lib.cma \
	  -linkpkg \
	  bitstring.cma bitstring_persistent.cma \
	  bitstring_objinfo.cmo -o bitstring-objinfo
ocamlfind install bitstring META *.mli *.cmx *.cma *.cmxa *.a *.so \
		bitstring.cmi \
		bitstring_persistent.cmi \
		pa_bitstring.cmo
Installed /home/opam/.opam/4.01.0/lib/bitstring/pa_bitstring.cmo
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.cmi
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.cmi
Installed /home/opam/.opam/4.01.0/lib/bitstring/libbitstring.a
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.a
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.a
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.cmxa
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.cmxa
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.cma
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.cma
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_types.cmx
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.cmx
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_config.cmx
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.cmx
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitmatch.cmx
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring_persistent.mli
Installed /home/opam/.opam/4.01.0/lib/bitstring/bitstring.mli
Installed /home/opam/.opam/4.01.0/lib/bitstring/META
Installed /home/opam/.opam/4.01.0/lib/stublibs/dllbitstring.so
Installed /home/opam/.opam/4.01.0/lib/stublibs/dllbitstring.so.owner
ocamlfind: [WARNING] You have installed DLLs but the directory /home/opam/.opam/4.01.0/lib/stublibs is not mentioned in ld.conf
Installing bitstring.2.0.4.
Building mysql_protocol.0.9:
  make all
  make install
ocamlbuild -use-ocamlfind -verbose 9 src.otarget
Doing sanity checks
include directories are: [ "." ]
==> src.otarget
====> src.itarget
src.itarget exists in source dir -> import it
start rule target files (%=src )
====> src/mysql_protocol.cmo
======> src/mysql_protocol.mli
========> src/mysql_protocol.mly
======> src/mysql_protocol.mlpack
src/mysql_protocol.mlpack exists in source dir -> import it
start rule ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )
prepare_libs: "src/mysql_protocol.cmo" -> [  ]
======> src/mp_authentication.cmo
========> src/mp_authentication.mli
==========> src/mp_authentication.mly
========> src/mp_authentication.mlpack
========> src/mp_authentication.mli
==========> src/mp_authentication.mly
src/mp_authentication.mly already failed
========> src/mp_authentication.ml
src/mp_authentication.ml exists in source dir -> import it
========> src/mp_authentication.ml.depends
==========> src/mp_authentication.ml
src/mp_authentication.ml already built
start rule ocaml dependencies ml (%=src/mp_authentication )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_authentication ): cache miss: a product is not in build dir (src/mp_authentication.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_authentication.ml > src/mp_authentication.ml.depends
resource_changed: src/mp_authentication.ml.depends
end rule ocaml dependencies ml (%=src/mp_authentication )
start rule ocaml: ml -> cmo & cmi (%=src/mp_authentication )
========> src/bitstring.cmi
==========> src/bitstring.mli
============> src/bitstring.mly
==========> src/bitstring.mlpack
==========> src/bitstring.ml
============> src/bitstring.mll
============> src/bitstring.mly
src/bitstring.mly already failed
========> src/Bitstring.cmi
==========> src/Bitstring.mli
============> src/Bitstring.mly
==========> src/Bitstring.mlpack
==========> src/Bitstring.ml
============> src/Bitstring.mll
============> src/Bitstring.mly
src/Bitstring.mly already failed
========> bitstring.cmi
==========> bitstring.mli
============> bitstring.mly
==========> bitstring.mlpack
==========> bitstring.ml
============> bitstring.mll
============> bitstring.mly
bitstring.mly already failed
========> Bitstring.cmi
==========> Bitstring.mli
============> Bitstring.mly
==========> Bitstring.mlpack
==========> Bitstring.ml
============> Bitstring.mll
============> Bitstring.mly
Bitstring.mly already failed
========> src/char.cmi
==========> src/char.mli
============> src/char.mly
==========> src/char.mlpack
==========> src/char.ml
============> src/char.mll
============> src/char.mly
src/char.mly already failed
========> src/Char.cmi
==========> src/Char.mli
============> src/Char.mly
==========> src/Char.mlpack
==========> src/Char.ml
============> src/Char.mll
============> src/Char.mly
src/Char.mly already failed
========> char.cmi
==========> char.mli
============> char.mly
==========> char.mlpack
==========> char.ml
============> char.mll
============> char.mly
char.mly already failed
========> Char.cmi
==========> Char.mli
============> Char.mly
==========> Char.mlpack
==========> Char.ml
============> Char.mll
============> Char.mly
Char.mly already failed
========> src/cryptokit.cmi
==========> src/cryptokit.mli
============> src/cryptokit.mly
==========> src/cryptokit.mlpack
==========> src/cryptokit.ml
============> src/cryptokit.mll
============> src/cryptokit.mly
src/cryptokit.mly already failed
========> src/Cryptokit.cmi
==========> src/Cryptokit.mli
============> src/Cryptokit.mly
==========> src/Cryptokit.mlpack
==========> src/Cryptokit.ml
============> src/Cryptokit.mll
============> src/Cryptokit.mly
src/Cryptokit.mly already failed
========> cryptokit.cmi
==========> cryptokit.mli
============> cryptokit.mly
==========> cryptokit.mlpack
==========> cryptokit.ml
============> cryptokit.mll
============> cryptokit.mly
cryptokit.mly already failed
========> Cryptokit.cmi
==========> Cryptokit.mli
============> Cryptokit.mly
==========> Cryptokit.mlpack
==========> Cryptokit.ml
============> Cryptokit.mll
============> Cryptokit.mly
Cryptokit.mly already failed
========> src/int64.cmi
==========> src/int64.mli
============> src/int64.mly
==========> src/int64.mlpack
==========> src/int64.ml
============> src/int64.mll
============> src/int64.mly
src/int64.mly already failed
========> src/Int64.cmi
==========> src/Int64.mli
============> src/Int64.mly
==========> src/Int64.mlpack
==========> src/Int64.ml
============> src/Int64.mll
============> src/Int64.mly
src/Int64.mly already failed
========> int64.cmi
==========> int64.mli
============> int64.mly
==========> int64.mlpack
==========> int64.ml
============> int64.mll
============> int64.mly
int64.mly already failed
========> Int64.cmi
==========> Int64.mli
============> Int64.mly
==========> Int64.mlpack
==========> Int64.ml
============> Int64.mll
============> Int64.mly
Int64.mly already failed
========> src/mp_bitstring.cmi
==========> src/mp_bitstring.mli
============> src/mp_bitstring.mly
==========> src/mp_bitstring.mlpack
==========> src/mp_bitstring.ml
src/mp_bitstring.ml exists in source dir -> import it
==========> src/mp_bitstring.ml.depends
============> src/mp_bitstring.ml
src/mp_bitstring.ml already built
start rule ocaml dependencies ml (%=src/mp_bitstring )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_bitstring ): cache miss: a product is not in build dir (src/mp_bitstring.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_bitstring.ml > src/mp_bitstring.ml.depends
resource_changed: src/mp_bitstring.ml.depends
end rule ocaml dependencies ml (%=src/mp_bitstring )
start rule ocaml: ml -> cmo & cmi (%=src/mp_bitstring )
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_bitstring ): cache miss: a product is not in build dir (src/mp_bitstring.cmo)
========> src/mp_capabilities.cmi
==========> src/mp_capabilities.mli
============> src/mp_capabilities.mly
==========> src/mp_capabilities.mlpack
==========> src/mp_capabilities.ml
src/mp_capabilities.ml exists in source dir -> import it
==========> src/mp_capabilities.ml.depends
============> src/mp_capabilities.ml
src/mp_capabilities.ml already built
start rule ocaml dependencies ml (%=src/mp_capabilities )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_capabilities ): cache miss: a product is not in build dir (src/mp_capabilities.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_capabilities.ml > src/mp_capabilities.ml.depends
resource_changed: src/mp_capabilities.ml.depends
end rule ocaml dependencies ml (%=src/mp_capabilities )
start rule ocaml: ml -> cmo & cmi (%=src/mp_capabilities )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/list.cmi
============> src/list.mli
==============> src/list.mly
============> src/list.mlpack
============> src/list.ml
==============> src/list.mll
==============> src/list.mly
src/list.mly already failed
==========> src/List.cmi
============> src/List.mli
==============> src/List.mly
============> src/List.mlpack
============> src/List.ml
==============> src/List.mll
==============> src/List.mly
src/List.mly already failed
==========> list.cmi
============> list.mli
==============> list.mly
============> list.mlpack
============> list.ml
==============> list.mll
==============> list.mly
list.mly already failed
==========> List.cmi
============> List.mli
==============> List.mly
============> List.mlpack
============> List.ml
==============> List.mll
==============> List.mly
List.mly already failed
==========> src/string.cmi
============> src/string.mli
==============> src/string.mly
============> src/string.mlpack
============> src/string.ml
==============> src/string.mll
==============> src/string.mly
src/string.mly already failed
==========> src/String.cmi
============> src/String.mli
==============> src/String.mly
============> src/String.mlpack
============> src/String.ml
==============> src/String.mll
==============> src/String.mly
src/String.mly already failed
==========> string.cmi
============> string.mli
==============> string.mly
============> string.mlpack
============> string.ml
==============> string.mll
==============> string.mly
string.mly already failed
==========> String.cmi
============> String.mli
==============> String.mly
============> String.mlpack
============> String.ml
==============> String.mll
==============> String.mly
String.mly already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_capabilities ): cache miss: a product is not in build dir (src/mp_capabilities.cmo)
========> src/mp_handshake.cmi
==========> src/mp_handshake.mli
============> src/mp_handshake.mly
==========> src/mp_handshake.mlpack
==========> src/mp_handshake.ml
src/mp_handshake.ml exists in source dir -> import it
==========> src/mp_handshake.ml.depends
============> src/mp_handshake.ml
src/mp_handshake.ml already built
start rule ocaml dependencies ml (%=src/mp_handshake )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_handshake ): cache miss: a product is not in build dir (src/mp_handshake.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_handshake.ml > src/mp_handshake.ml.depends
resource_changed: src/mp_handshake.ml.depends
end rule ocaml dependencies ml (%=src/mp_handshake )
start rule ocaml: ml -> cmo & cmi (%=src/mp_handshake )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/int32.cmi
============> src/int32.mli
==============> src/int32.mly
============> src/int32.mlpack
============> src/int32.ml
==============> src/int32.mll
==============> src/int32.mly
src/int32.mly already failed
==========> src/Int32.cmi
============> src/Int32.mli
==============> src/Int32.mly
============> src/Int32.mlpack
============> src/Int32.ml
==============> src/Int32.mll
==============> src/Int32.mly
src/Int32.mly already failed
==========> int32.cmi
============> int32.mli
==============> int32.mly
============> int32.mlpack
============> int32.ml
==============> int32.mll
==============> int32.mly
int32.mly already failed
==========> Int32.cmi
============> Int32.mli
==============> Int32.mly
============> Int32.mlpack
============> Int32.ml
==============> Int32.mll
==============> Int32.mly
Int32.mly already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_capabilities.cmi
src/mp_capabilities.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_capabilities.cmo src/mp_capabilities.ml
resource_changed: src/mp_capabilities.cmo
resource_changed: src/mp_capabilities.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_capabilities )
==========> src/mp_charset.cmi
============> src/mp_charset.mli
src/mp_charset.mli exists in source dir -> import it
============> src/mp_charset.mli.depends
==============> src/mp_charset.mli
src/mp_charset.mli already built
start rule ocaml dependencies mli (%=src/mp_charset )
dyndeps: {.  .}
mid rule ocaml dependencies mli (%=src/mp_charset ): cache miss: a product is not in build dir (src/mp_charset.mli.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_charset.mli > src/mp_charset.mli.depends
resource_changed: src/mp_charset.mli.depends
end rule ocaml dependencies mli (%=src/mp_charset )
start rule ocaml: mli -> cmi (%=src/mp_charset )
dyndeps: {.  .}
mid rule ocaml: mli -> cmi (%=src/mp_charset ): cache miss: a product is not in build dir (src/mp_charset.cmi)
==========> src/mp_packet.cmi
============> src/mp_packet.mli
==============> src/mp_packet.mly
============> src/mp_packet.mlpack
============> src/mp_packet.ml
src/mp_packet.ml exists in source dir -> import it
============> src/mp_packet.ml.depends
==============> src/mp_packet.ml
src/mp_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_packet ): cache miss: a product is not in build dir (src/mp_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_packet.ml > src/mp_packet.ml.depends
resource_changed: src/mp_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_packet )
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
============> src/sys.cmi
==============> src/sys.mli
================> src/sys.mly
==============> src/sys.mlpack
==============> src/sys.ml
================> src/sys.mll
================> src/sys.mly
src/sys.mly already failed
============> src/Sys.cmi
==============> src/Sys.mli
================> src/Sys.mly
==============> src/Sys.mlpack
==============> src/Sys.ml
================> src/Sys.mll
================> src/Sys.mly
src/Sys.mly already failed
============> sys.cmi
==============> sys.mli
================> sys.mly
==============> sys.mlpack
==============> sys.ml
================> sys.mll
================> sys.mly
sys.mly already failed
============> Sys.cmi
==============> Sys.mli
================> Sys.mly
==============> Sys.mlpack
==============> Sys.ml
================> Sys.mll
================> Sys.mly
Sys.mly already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_packet ): cache miss: a product is not in build dir (src/mp_packet.cmo)
==========> src/mp_string.cmi
============> src/mp_string.mli
==============> src/mp_string.mly
============> src/mp_string.mlpack
============> src/mp_string.ml
src/mp_string.ml exists in source dir -> import it
============> src/mp_string.ml.depends
==============> src/mp_string.ml
src/mp_string.ml already built
start rule ocaml dependencies ml (%=src/mp_string )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_string ): cache miss: a product is not in build dir (src/mp_string.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_string.ml > src/mp_string.ml.depends
resource_changed: src/mp_string.ml.depends
end rule ocaml dependencies ml (%=src/mp_string )
start rule ocaml: ml -> cmo & cmi (%=src/mp_string )
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/mp_binary.cmi
==============> src/mp_binary.mli
================> src/mp_binary.mly
==============> src/mp_binary.mlpack
==============> src/mp_binary.ml
src/mp_binary.ml exists in source dir -> import it
==============> src/mp_binary.ml.depends
================> src/mp_binary.ml
src/mp_binary.ml already built
start rule ocaml dependencies ml (%=src/mp_binary )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_binary ): cache miss: a product is not in build dir (src/mp_binary.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_binary.ml > src/mp_binary.ml.depends
resource_changed: src/mp_binary.ml.depends
end rule ocaml dependencies ml (%=src/mp_binary )
start rule ocaml: ml -> cmo & cmi (%=src/mp_binary )
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/printf.cmi
================> src/printf.mli
==================> src/printf.mly
================> src/printf.mlpack
================> src/printf.ml
==================> src/printf.mll
==================> src/printf.mly
src/printf.mly already failed
==============> src/Printf.cmi
================> src/Printf.mli
==================> src/Printf.mly
================> src/Printf.mlpack
================> src/Printf.ml
==================> src/Printf.mll
==================> src/Printf.mly
src/Printf.mly already failed
==============> printf.cmi
================> printf.mli
==================> printf.mly
================> printf.mlpack
================> printf.ml
==================> printf.mll
==================> printf.mly
printf.mly already failed
==============> Printf.cmi
================> Printf.mli
==================> Printf.mly
================> Printf.mlpack
================> Printf.ml
==================> Printf.mll
==================> Printf.mly
Printf.mly already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_binary ): cache miss: a product is not in build dir (src/mp_binary.cmo)
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_binary.cmo src/mp_binary.ml
resource_changed: src/mp_binary.cmo
resource_changed: src/mp_binary.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_binary )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_string )"([
                                                             src/mp_string.cmo;
                                                             src/mp_string.cmi
                                                             ]): "src/mp_binary.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_binary.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_string ): cache miss: a product is not in build dir (src/mp_string.cmo)
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
>>> PARALLEL: 3
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_charset.cmi src/mp_charset.mli
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_packet.cmo src/mp_packet.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_string.cmo src/mp_string.ml
<<< PARALLEL
resource_changed: src/mp_charset.cmi
end rule ocaml: mli -> cmi (%=src/mp_charset )
resource_changed: src/mp_packet.cmo
resource_changed: src/mp_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_packet )
resource_changed: src/mp_string.cmo
resource_changed: src/mp_string.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_string )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_handshake )"([
                                                                src/mp_handshake.cmo;
                                                                src/mp_handshake.cmi
                                                                ]): "src/mp_capabilities.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_handshake )"([
                                                                src/mp_handshake.cmo;
                                                                src/mp_handshake.cmi
                                                                ]): "src/mp_charset.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_handshake )"([
                                                                src/mp_handshake.cmo;
                                                                src/mp_handshake.cmi
                                                                ]): "src/mp_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_handshake )"([
                                                                src/mp_handshake.cmo;
                                                                src/mp_handshake.cmi
                                                                ]): "src/mp_string.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_capabilities.cmi,
           src/mp_charset.cmi,
           src/mp_packet.cmi,
           src/mp_string.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_handshake ): cache miss: a product is not in build dir (src/mp_handshake.cmo)
========> src/mp_packet.cmi
src/mp_packet.cmi already built
========> src/mp_string.cmi
src/mp_string.cmi already built
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
>>> PARALLEL: 2
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_bitstring.cmo src/mp_bitstring.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_handshake.cmo src/mp_handshake.ml
<<< PARALLEL
resource_changed: src/mp_bitstring.cmo
resource_changed: src/mp_bitstring.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_bitstring )
resource_changed: src/mp_handshake.cmo
resource_changed: src/mp_handshake.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_handshake )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_authentication )"([
                                                                    src/mp_authentication.cmo;
                                                                    src/mp_authentication.cmi
                                                                    ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_authentication )"([
                                                                    src/mp_authentication.cmo;
                                                                    src/mp_authentication.cmi
                                                                    ]): "src/mp_capabilities.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_authentication )"([
                                                                    src/mp_authentication.cmo;
                                                                    src/mp_authentication.cmi
                                                                    ]): "src/mp_handshake.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_authentication )"([
                                                                    src/mp_authentication.cmo;
                                                                    src/mp_authentication.cmi
                                                                    ]): "src/mp_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_authentication )"([
                                                                    src/mp_authentication.cmo;
                                                                    src/mp_authentication.cmi
                                                                    ]): "src/mp_string.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
Warning: Failed to build the module Cryptokit requested by ocamldep
dyndeps: {.
           src/mp_bitstring.cmi,
           src/mp_capabilities.cmi,
           src/mp_handshake.cmi,
           src/mp_packet.cmi,
           src/mp_string.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_authentication ): cache miss: a product is not in build dir (src/mp_authentication.cmo)
======> src/mp_binary.cmo
src/mp_binary.cmo already built
======> src/mp_bitstring.cmo
src/mp_bitstring.cmo already built
======> src/mp_capabilities.cmo
src/mp_capabilities.cmo already built
======> src/mp_change_user.cmo
========> src/mp_change_user.mli
==========> src/mp_change_user.mly
========> src/mp_change_user.mlpack
========> src/mp_change_user.mli
==========> src/mp_change_user.mly
src/mp_change_user.mly already failed
========> src/mp_change_user.ml
src/mp_change_user.ml exists in source dir -> import it
========> src/mp_change_user.ml.depends
==========> src/mp_change_user.ml
src/mp_change_user.ml already built
start rule ocaml dependencies ml (%=src/mp_change_user )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_change_user ): cache miss: a product is not in build dir (src/mp_change_user.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_change_user.ml > src/mp_change_user.ml.depends
resource_changed: src/mp_change_user.ml.depends
end rule ocaml dependencies ml (%=src/mp_change_user )
start rule ocaml: ml -> cmo & cmi (%=src/mp_change_user )
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/mp_authentication.cmi
src/mp_authentication.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_authentication.cmo src/mp_authentication.ml
resource_changed: src/mp_authentication.cmo
resource_changed: src/mp_authentication.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_authentication )
========> src/mp_handshake.cmi
src/mp_handshake.cmi already built
========> src/mp_string.cmi
src/mp_string.cmi already built
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_change_user )"([
                                                                  src/mp_change_user.cmo;
                                                                  src/mp_change_user.cmi
                                                                  ]): "src/mp_authentication.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_change_user )"([
                                                                  src/mp_change_user.cmo;
                                                                  src/mp_change_user.cmi
                                                                  ]): "src/mp_handshake.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_change_user )"([
                                                                  src/mp_change_user.cmo;
                                                                  src/mp_change_user.cmi
                                                                  ]): "src/mp_string.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_authentication.cmi,
           src/mp_handshake.cmi,
           src/mp_string.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_change_user ): cache miss: a product is not in build dir (src/mp_change_user.cmo)
======> src/mp_charset.cmo
========> src/mp_charset.mli
src/mp_charset.mli already built
========> src/mp_charset.cmi
src/mp_charset.cmi already built
========> src/mp_charset.mlpack
========> src/mp_charset.mlpack
src/mp_charset.mlpack already failed
========> src/mp_charset.mli
src/mp_charset.mli already built
========> src/mp_charset.ml
src/mp_charset.ml exists in source dir -> import it
========> src/mp_charset.ml.depends
==========> src/mp_charset.ml
src/mp_charset.ml already built
start rule ocaml dependencies ml (%=src/mp_charset )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_charset ): cache miss: a product is not in build dir (src/mp_charset.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_charset.ml > src/mp_charset.ml.depends
resource_changed: src/mp_charset.ml.depends
end rule ocaml dependencies ml (%=src/mp_charset )
========> src/mp_charset.cmi
src/mp_charset.cmi already built
start rule ocaml: ml & cmi -> cmo (%=src/mp_charset )
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmo (%=src/mp_charset ): cache miss: a product is not in build dir (src/mp_charset.cmo)
======> src/mp_client.cmo
========> src/mp_client.mli
src/mp_client.mli exists in source dir -> import it
========> src/mp_client.cmi
==========> src/mp_client.mli
src/mp_client.mli already built
==========> src/mp_client.mli.depends
============> src/mp_client.mli
src/mp_client.mli already built
start rule ocaml dependencies mli (%=src/mp_client )
dyndeps: {.  .}
mid rule ocaml dependencies mli (%=src/mp_client ): cache miss: a product is not in build dir (src/mp_client.mli.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_client.mli > src/mp_client.mli.depends
resource_changed: src/mp_client.mli.depends
end rule ocaml dependencies mli (%=src/mp_client )
start rule ocaml: mli -> cmi (%=src/mp_client )
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_capabilities.cmi
src/mp_capabilities.cmi already built
==========> src/mp_charset.cmi
src/mp_charset.cmi already built
==========> src/mp_data.cmi
============> src/mp_data.mli
src/mp_data.mli exists in source dir -> import it
============> src/mp_data.mli.depends
==============> src/mp_data.mli
src/mp_data.mli already built
start rule ocaml dependencies mli (%=src/mp_data )
dyndeps: {.  .}
mid rule ocaml dependencies mli (%=src/mp_data ): cache miss: a product is not in build dir (src/mp_data.mli.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_data.mli > src/mp_data.mli.depends
resource_changed: src/mp_data.mli.depends
end rule ocaml dependencies mli (%=src/mp_data )
start rule ocaml: mli -> cmi (%=src/mp_data )
============> src/big_int.cmi
==============> src/big_int.mli
================> src/big_int.mly
==============> src/big_int.mlpack
==============> src/big_int.ml
================> src/big_int.mll
================> src/big_int.mly
src/big_int.mly already failed
============> src/Big_int.cmi
==============> src/Big_int.mli
================> src/Big_int.mly
==============> src/Big_int.mlpack
==============> src/Big_int.ml
================> src/Big_int.mll
================> src/Big_int.mly
src/Big_int.mly already failed
============> big_int.cmi
==============> big_int.mli
================> big_int.mly
==============> big_int.mlpack
==============> big_int.ml
================> big_int.mll
================> big_int.mly
big_int.mly already failed
============> Big_int.cmi
==============> Big_int.mli
================> Big_int.mly
==============> Big_int.mlpack
==============> Big_int.ml
================> Big_int.mll
================> Big_int.mly
Big_int.mly already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/buffer.cmi
==============> src/buffer.mli
================> src/buffer.mly
==============> src/buffer.mlpack
==============> src/buffer.ml
================> src/buffer.mll
================> src/buffer.mly
src/buffer.mly already failed
============> src/Buffer.cmi
==============> src/Buffer.mli
================> src/Buffer.mly
==============> src/Buffer.mlpack
==============> src/Buffer.ml
================> src/Buffer.mll
================> src/Buffer.mly
src/Buffer.mly already failed
============> buffer.cmi
==============> buffer.mli
================> buffer.mly
==============> buffer.mlpack
==============> buffer.ml
================> buffer.mll
================> buffer.mly
buffer.mly already failed
============> Buffer.cmi
==============> Buffer.mli
================> Buffer.mly
==============> Buffer.mlpack
==============> Buffer.ml
================> Buffer.mll
================> Buffer.mly
Buffer.mly already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/num.cmi
==============> src/num.mli
================> src/num.mly
==============> src/num.mlpack
==============> src/num.ml
================> src/num.mll
================> src/num.mly
src/num.mly already failed
============> src/Num.cmi
==============> src/Num.mli
================> src/Num.mly
==============> src/Num.mlpack
==============> src/Num.ml
================> src/Num.mll
================> src/Num.mly
src/Num.mly already failed
============> num.cmi
==============> num.mli
================> num.mly
==============> num.mlpack
==============> num.ml
================> num.mll
================> num.mly
num.mly already failed
============> Num.cmi
==============> Num.mli
================> Num.mly
==============> Num.mlpack
==============> Num.ml
================> Num.mll
================> Num.mly
Num.mly already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: mli -> cmi (%=src/mp_data ): cache miss: a product is not in build dir (src/mp_data.cmi)
==========> src/mp_execute.cmi
============> src/mp_execute.mli
==============> src/mp_execute.mly
============> src/mp_execute.mlpack
============> src/mp_execute.ml
src/mp_execute.ml exists in source dir -> import it
============> src/mp_execute.ml.depends
==============> src/mp_execute.ml
src/mp_execute.ml already built
start rule ocaml dependencies ml (%=src/mp_execute )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_execute ): cache miss: a product is not in build dir (src/mp_execute.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_execute.ml > src/mp_execute.ml.depends
resource_changed: src/mp_execute.ml.depends
end rule ocaml dependencies ml (%=src/mp_execute )
start rule ocaml: ml -> cmo & cmi (%=src/mp_execute )
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/list.cmi
src/list.cmi already failed
============> src/List.cmi
src/List.cmi already failed
============> list.cmi
list.cmi already failed
============> List.cmi
List.cmi already failed
============> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
============> src/mp_data.cmi
src/mp_data.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data.cmi src/mp_data.mli
resource_changed: src/mp_data.cmi
end rule ocaml: mli -> cmi (%=src/mp_data )
============> src/mp_data_process.cmi
==============> src/mp_data_process.mli
================> src/mp_data_process.mly
==============> src/mp_data_process.mlpack
==============> src/mp_data_process.ml
src/mp_data_process.ml exists in source dir -> import it
==============> src/mp_data_process.ml.depends
================> src/mp_data_process.ml
src/mp_data_process.ml already built
start rule ocaml dependencies ml (%=src/mp_data_process )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_data_process ): cache miss: a product is not in build dir (src/mp_data_process.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_data_process.ml > src/mp_data_process.ml.depends
resource_changed: src/mp_data_process.ml.depends
end rule ocaml dependencies ml (%=src/mp_data_process )
start rule ocaml: ml -> cmo & cmi (%=src/mp_data_process )
==============> src/big_int.cmi
src/big_int.cmi already failed
==============> src/Big_int.cmi
src/Big_int.cmi already failed
==============> big_int.cmi
big_int.cmi already failed
==============> Big_int.cmi
Big_int.cmi already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/buffer.cmi
src/buffer.cmi already failed
==============> src/Buffer.cmi
src/Buffer.cmi already failed
==============> buffer.cmi
buffer.cmi already failed
==============> Buffer.cmi
Buffer.cmi already failed
==============> src/int32.cmi
src/int32.cmi already failed
==============> src/Int32.cmi
src/Int32.cmi already failed
==============> int32.cmi
int32.cmi already failed
==============> Int32.cmi
Int32.cmi already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_binary.cmi
src/mp_binary.cmi already built
==============> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
==============> src/mp_data.cmi
src/mp_data.cmi already built
==============> src/mp_data_binary.cmi
================> src/mp_data_binary.mli
==================> src/mp_data_binary.mly
================> src/mp_data_binary.mlpack
================> src/mp_data_binary.ml
src/mp_data_binary.ml exists in source dir -> import it
================> src/mp_data_binary.ml.depends
==================> src/mp_data_binary.ml
src/mp_data_binary.ml already built
start rule ocaml dependencies ml (%=src/mp_data_binary )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_data_binary ): cache miss: a product is not in build dir (src/mp_data_binary.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_data_binary.ml > src/mp_data_binary.ml.depends
resource_changed: src/mp_data_binary.ml.depends
end rule ocaml dependencies ml (%=src/mp_data_binary )
start rule ocaml: ml -> cmo & cmi (%=src/mp_data_binary )
================> src/big_int.cmi
src/big_int.cmi already failed
================> src/Big_int.cmi
src/Big_int.cmi already failed
================> big_int.cmi
big_int.cmi already failed
================> Big_int.cmi
Big_int.cmi already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/buffer.cmi
src/buffer.cmi already failed
================> src/Buffer.cmi
src/Buffer.cmi already failed
================> buffer.cmi
buffer.cmi already failed
================> Buffer.cmi
Buffer.cmi already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/int32.cmi
src/int32.cmi already failed
================> src/Int32.cmi
src/Int32.cmi already failed
================> int32.cmi
int32.cmi already failed
================> Int32.cmi
Int32.cmi already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/list.cmi
src/list.cmi already failed
================> src/List.cmi
src/List.cmi already failed
================> list.cmi
list.cmi already failed
================> List.cmi
List.cmi already failed
================> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
================> src/mp_data.cmi
src/mp_data.cmi already built
================> src/mp_field_packet.cmi
==================> src/mp_field_packet.mli
====================> src/mp_field_packet.mly
==================> src/mp_field_packet.mlpack
==================> src/mp_field_packet.ml
src/mp_field_packet.ml exists in source dir -> import it
==================> src/mp_field_packet.ml.depends
====================> src/mp_field_packet.ml
src/mp_field_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_field_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_field_packet ): cache miss: a product is not in build dir (src/mp_field_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_field_packet.ml > src/mp_field_packet.ml.depends
resource_changed: src/mp_field_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_field_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_field_packet )
==================> src/bitstring.cmi
src/bitstring.cmi already failed
==================> src/Bitstring.cmi
src/Bitstring.cmi already failed
==================> bitstring.cmi
bitstring.cmi already failed
==================> Bitstring.cmi
Bitstring.cmi already failed
==================> src/char.cmi
src/char.cmi already failed
==================> src/Char.cmi
src/Char.cmi already failed
==================> char.cmi
char.cmi already failed
==================> Char.cmi
Char.cmi already failed
==================> src/int64.cmi
src/int64.cmi already failed
==================> src/Int64.cmi
src/Int64.cmi already failed
==================> int64.cmi
int64.cmi already failed
==================> Int64.cmi
Int64.cmi already failed
==================> src/list.cmi
src/list.cmi already failed
==================> src/List.cmi
src/List.cmi already failed
==================> list.cmi
list.cmi already failed
==================> List.cmi
List.cmi already failed
==================> src/mp_binary.cmi
src/mp_binary.cmi already built
==================> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
==================> src/mp_packet.cmi
src/mp_packet.cmi already built
==================> src/mp_protocol.cmi
====================> src/mp_protocol.mli
======================> src/mp_protocol.mly
====================> src/mp_protocol.mlpack
====================> src/mp_protocol.ml
src/mp_protocol.ml exists in source dir -> import it
====================> src/mp_protocol.ml.depends
======================> src/mp_protocol.ml
src/mp_protocol.ml already built
start rule ocaml dependencies ml (%=src/mp_protocol )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_protocol ): cache miss: a product is not in build dir (src/mp_protocol.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_protocol.ml > src/mp_protocol.ml.depends
resource_changed: src/mp_protocol.ml.depends
end rule ocaml dependencies ml (%=src/mp_protocol )
start rule ocaml: ml -> cmo & cmi (%=src/mp_protocol )
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_protocol ): cache miss: a product is not in build dir (src/mp_protocol.cmo)
==================> src/mp_string.cmi
src/mp_string.cmi already built
==================> src/printf.cmi
src/printf.cmi already failed
==================> src/Printf.cmi
src/Printf.cmi already failed
==================> printf.cmi
printf.cmi already failed
==================> Printf.cmi
Printf.cmi already failed
==================> src/string.cmi
src/string.cmi already failed
==================> src/String.cmi
src/String.cmi already failed
==================> string.cmi
string.cmi already failed
==================> String.cmi
String.cmi already failed
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_protocol.cmo src/mp_protocol.ml
resource_changed: src/mp_protocol.cmo
resource_changed: src/mp_protocol.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_protocol )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field_packet )"([
                                                                   src/mp_field_packet.cmo;
                                                                   src/mp_field_packet.cmi
                                                                   ]): "src/mp_binary.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field_packet )"([
                                                                   src/mp_field_packet.cmo;
                                                                   src/mp_field_packet.cmi
                                                                   ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field_packet )"([
                                                                   src/mp_field_packet.cmo;
                                                                   src/mp_field_packet.cmi
                                                                   ]): "src/mp_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field_packet )"([
                                                                   src/mp_field_packet.cmo;
                                                                   src/mp_field_packet.cmi
                                                                   ]): "src/mp_protocol.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field_packet )"([
                                                                   src/mp_field_packet.cmo;
                                                                   src/mp_field_packet.cmi
                                                                   ]): "src/mp_string.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_binary.cmi,
           src/mp_bitstring.cmi,
           src/mp_packet.cmi,
           src/mp_protocol.cmi,
           src/mp_string.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_field_packet ): cache miss: a product is not in build dir (src/mp_field_packet.cmo)
================> src/num.cmi
src/num.cmi already failed
================> src/Num.cmi
src/Num.cmi already failed
================> num.cmi
num.cmi already failed
================> Num.cmi
Num.cmi already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_field_packet.cmo src/mp_field_packet.ml
resource_changed: src/mp_field_packet.cmo
resource_changed: src/mp_field_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_field_packet )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_binary )"([
                                                                  src/mp_data_binary.cmo;
                                                                  src/mp_data_binary.cmi
                                                                  ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_binary )"([
                                                                  src/mp_data_binary.cmo;
                                                                  src/mp_data_binary.cmi
                                                                  ]): "src/mp_data.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_binary )"([
                                                                  src/mp_data_binary.cmo;
                                                                  src/mp_data_binary.cmi
                                                                  ]): "src/mp_field_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_bitstring.cmi, src/mp_data.cmi, src/mp_field_packet.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_data_binary ): cache miss: a product is not in build dir (src/mp_data_binary.cmo)
==============> src/mp_data_simple.cmi
================> src/mp_data_simple.mli
==================> src/mp_data_simple.mly
================> src/mp_data_simple.mlpack
================> src/mp_data_simple.ml
src/mp_data_simple.ml exists in source dir -> import it
================> src/mp_data_simple.ml.depends
==================> src/mp_data_simple.ml
src/mp_data_simple.ml already built
start rule ocaml dependencies ml (%=src/mp_data_simple )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_data_simple ): cache miss: a product is not in build dir (src/mp_data_simple.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_data_simple.ml > src/mp_data_simple.ml.depends
resource_changed: src/mp_data_simple.ml.depends
end rule ocaml dependencies ml (%=src/mp_data_simple )
start rule ocaml: ml -> cmo & cmi (%=src/mp_data_simple )
================> src/array.cmi
==================> src/array.mli
====================> src/array.mly
==================> src/array.mlpack
==================> src/array.ml
====================> src/array.mll
====================> src/array.mly
src/array.mly already failed
================> src/Array.cmi
==================> src/Array.mli
====================> src/Array.mly
==================> src/Array.mlpack
==================> src/Array.ml
====================> src/Array.mll
====================> src/Array.mly
src/Array.mly already failed
================> array.cmi
==================> array.mli
====================> array.mly
==================> array.mlpack
==================> array.ml
====================> array.mll
====================> array.mly
array.mly already failed
================> Array.cmi
==================> Array.mli
====================> Array.mly
==================> Array.mlpack
==================> Array.ml
====================> Array.mll
====================> Array.mly
Array.mly already failed
================> src/big_int.cmi
src/big_int.cmi already failed
================> src/Big_int.cmi
src/Big_int.cmi already failed
================> big_int.cmi
big_int.cmi already failed
================> Big_int.cmi
Big_int.cmi already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/buffer.cmi
src/buffer.cmi already failed
================> src/Buffer.cmi
src/Buffer.cmi already failed
================> buffer.cmi
buffer.cmi already failed
================> Buffer.cmi
Buffer.cmi already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/list.cmi
src/list.cmi already failed
================> src/List.cmi
src/List.cmi already failed
================> list.cmi
list.cmi already failed
================> List.cmi
List.cmi already failed
================> src/mp_data.cmi
src/mp_data.cmi already built
================> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
================> src/num.cmi
src/num.cmi already failed
================> src/Num.cmi
src/Num.cmi already failed
================> num.cmi
num.cmi already failed
================> Num.cmi
Num.cmi already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_simple )"([
                                                                  src/mp_data_simple.cmo;
                                                                  src/mp_data_simple.cmi
                                                                  ]): "src/mp_data.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_simple )"([
                                                                  src/mp_data_simple.cmo;
                                                                  src/mp_data_simple.cmi
                                                                  ]): "src/mp_field_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_data.cmi, src/mp_field_packet.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_data_simple ): cache miss: a product is not in build dir (src/mp_data_simple.cmo)
==============> src/mp_raw_data.cmi
================> src/mp_raw_data.mli
==================> src/mp_raw_data.mly
================> src/mp_raw_data.mlpack
================> src/mp_raw_data.ml
src/mp_raw_data.ml exists in source dir -> import it
================> src/mp_raw_data.ml.depends
==================> src/mp_raw_data.ml
src/mp_raw_data.ml already built
start rule ocaml dependencies ml (%=src/mp_raw_data )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_raw_data ): cache miss: a product is not in build dir (src/mp_raw_data.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_raw_data.ml > src/mp_raw_data.ml.depends
resource_changed: src/mp_raw_data.ml.depends
end rule ocaml dependencies ml (%=src/mp_raw_data )
start rule ocaml: ml -> cmo & cmi (%=src/mp_raw_data )
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/list.cmi
src/list.cmi already failed
================> src/List.cmi
src/List.cmi already failed
================> list.cmi
list.cmi already failed
================> List.cmi
List.cmi already failed
================> src/mp_binary.cmi
src/mp_binary.cmi already built
================> src/mp_com.cmi
==================> src/mp_com.mli
====================> src/mp_com.mly
==================> src/mp_com.mlpack
==================> src/mp_com.ml
src/mp_com.ml exists in source dir -> import it
==================> src/mp_com.ml.depends
====================> src/mp_com.ml
src/mp_com.ml already built
start rule ocaml dependencies ml (%=src/mp_com )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_com ): cache miss: a product is not in build dir (src/mp_com.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_com.ml > src/mp_com.ml.depends
resource_changed: src/mp_com.ml.depends
end rule ocaml dependencies ml (%=src/mp_com )
start rule ocaml: ml -> cmo & cmi (%=src/mp_com )
==================> src/bitstring.cmi
src/bitstring.cmi already failed
==================> src/Bitstring.cmi
src/Bitstring.cmi already failed
==================> bitstring.cmi
bitstring.cmi already failed
==================> Bitstring.cmi
Bitstring.cmi already failed
==================> src/mp_packet.cmi
src/mp_packet.cmi already built
==================> src/string.cmi
src/string.cmi already failed
==================> src/String.cmi
src/String.cmi already failed
==================> string.cmi
string.cmi already failed
==================> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_com )"([ src/mp_com.cmo;
                                                          src/mp_com.cmi ]): "src/mp_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_packet.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_com ): cache miss: a product is not in build dir (src/mp_com.cmo)
================> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
================> src/mp_string.cmi
src/mp_string.cmi already built
================> src/printf.cmi
src/printf.cmi already failed
================> src/Printf.cmi
src/Printf.cmi already failed
================> printf.cmi
printf.cmi already failed
================> Printf.cmi
Printf.cmi already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_com.cmo src/mp_com.ml
resource_changed: src/mp_com.cmo
resource_changed: src/mp_com.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_com )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_raw_data )"([
                                                               src/mp_raw_data.cmo;
                                                               src/mp_raw_data.cmi
                                                               ]): "src/mp_binary.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_raw_data )"([
                                                               src/mp_raw_data.cmo;
                                                               src/mp_raw_data.cmi
                                                               ]): "src/mp_com.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_raw_data )"([
                                                               src/mp_raw_data.cmo;
                                                               src/mp_raw_data.cmi
                                                               ]): "src/mp_field_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_raw_data )"([
                                                               src/mp_raw_data.cmo;
                                                               src/mp_raw_data.cmi
                                                               ]): "src/mp_string.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_binary.cmi,
           src/mp_com.cmi,
           src/mp_field_packet.cmi,
           src/mp_string.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_raw_data ): cache miss: a product is not in build dir (src/mp_raw_data.cmo)
==============> src/num.cmi
src/num.cmi already failed
==============> src/Num.cmi
src/Num.cmi already failed
==============> num.cmi
num.cmi already failed
==============> Num.cmi
Num.cmi already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
>>> PARALLEL: 3
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data_binary.cmo src/mp_data_binary.ml
+ ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data_binary.cmo src/mp_data_binary.ml
File "src/mp_data_binary.ml", line 95, characters 2-6033:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Field_type_decimal|Field_type_newdate)
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data_simple.cmo src/mp_data_simple.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_raw_data.cmo src/mp_raw_data.ml
<<< PARALLEL
resource_changed: src/mp_data_binary.cmo
resource_changed: src/mp_data_binary.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_data_binary )
resource_changed: src/mp_data_simple.cmo
resource_changed: src/mp_data_simple.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_data_simple )
resource_changed: src/mp_raw_data.cmo
resource_changed: src/mp_raw_data.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_raw_data )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_binary.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_data.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_data_binary.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_data_simple.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_data_process )"([
                                                                   src/mp_data_process.cmo;
                                                                   src/mp_data_process.cmi
                                                                   ]): "src/mp_raw_data.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_binary.cmi,
           src/mp_bitstring.cmi,
           src/mp_data.cmi,
           src/mp_data_binary.cmi,
           src/mp_data_simple.cmi,
           src/mp_raw_data.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_data_process ): cache miss: a product is not in build dir (src/mp_data_process.cmo)
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data_process.cmo src/mp_data_process.ml
resource_changed: src/mp_data_process.cmo
resource_changed: src/mp_data_process.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_data_process )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_execute )"([
                                                              src/mp_execute.cmo;
                                                              src/mp_execute.cmi
                                                              ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_execute )"([
                                                              src/mp_execute.cmo;
                                                              src/mp_execute.cmi
                                                              ]): "src/mp_data.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_execute )"([
                                                              src/mp_execute.cmo;
                                                              src/mp_execute.cmi
                                                              ]): "src/mp_data_process.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_bitstring.cmi, src/mp_data.cmi, src/mp_data_process.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_execute ): cache miss: a product is not in build dir (src/mp_execute.cmo)
==========> src/mp_field.cmi
============> src/mp_field.mli
==============> src/mp_field.mly
============> src/mp_field.mlpack
============> src/mp_field.ml
src/mp_field.ml exists in source dir -> import it
============> src/mp_field.ml.depends
==============> src/mp_field.ml
src/mp_field.ml already built
start rule ocaml dependencies ml (%=src/mp_field )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_field ): cache miss: a product is not in build dir (src/mp_field.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_field.ml > src/mp_field.ml.depends
resource_changed: src/mp_field.ml.depends
end rule ocaml dependencies ml (%=src/mp_field )
start rule ocaml: ml -> cmo & cmi (%=src/mp_field )
============> src/list.cmi
src/list.cmi already failed
============> src/List.cmi
src/List.cmi already failed
============> list.cmi
list.cmi already failed
============> List.cmi
List.cmi already failed
============> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_field )"([ src/mp_field.cmo;
                                                            src/mp_field.cmi
                                                            ]): "src/mp_field_packet.cmi"
dyndeps: {. src/mp_field_packet.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_field ): cache miss: a product is not in build dir (src/mp_field.cmo)
==========> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
==========> src/mp_handshake.cmi
src/mp_handshake.cmi already built
==========> src/mp_result_set_packet.cmi
============> src/mp_result_set_packet.mli
==============> src/mp_result_set_packet.mly
============> src/mp_result_set_packet.mlpack
============> src/mp_result_set_packet.ml
src/mp_result_set_packet.ml exists in source dir -> import it
============> src/mp_result_set_packet.ml.depends
==============> src/mp_result_set_packet.ml
src/mp_result_set_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_result_set_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_result_set_packet ): cache miss: a product is not in build dir (src/mp_result_set_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_result_set_packet.ml > src/mp_result_set_packet.ml.depends
resource_changed: src/mp_result_set_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_result_set_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/list.cmi
src/list.cmi already failed
============> src/List.cmi
src/List.cmi already failed
============> list.cmi
list.cmi already failed
============> List.cmi
List.cmi already failed
============> src/mp_binary.cmi
src/mp_binary.cmi already built
============> src/mp_com.cmi
src/mp_com.cmi already built
============> src/mp_data.cmi
src/mp_data.cmi already built
============> src/mp_data_process.cmi
src/mp_data_process.cmi already built
============> src/mp_eof_packet.cmi
==============> src/mp_eof_packet.mli
================> src/mp_eof_packet.mly
==============> src/mp_eof_packet.mlpack
==============> src/mp_eof_packet.ml
src/mp_eof_packet.ml exists in source dir -> import it
==============> src/mp_eof_packet.ml.depends
================> src/mp_eof_packet.ml
src/mp_eof_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_eof_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_eof_packet ): cache miss: a product is not in build dir (src/mp_eof_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_eof_packet.ml > src/mp_eof_packet.ml.depends
resource_changed: src/mp_eof_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_eof_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_eof_packet )
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/mp_packet.cmi
src/mp_packet.cmi already built
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_eof_packet )"([
                                                                 src/mp_eof_packet.cmo;
                                                                 src/mp_eof_packet.cmi
                                                                 ]): "src/mp_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_packet.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_eof_packet ): cache miss: a product is not in build dir (src/mp_eof_packet.cmo)
============> src/mp_field.cmi
src/mp_field.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_field.cmo src/mp_field.ml
resource_changed: src/mp_field.cmo
resource_changed: src/mp_field.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_field )
============> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
============> src/mp_packet.cmi
src/mp_packet.cmi already built
============> src/mp_raw_data.cmi
src/mp_raw_data.cmi already built
============> src/printf.cmi
src/printf.cmi already failed
============> src/Printf.cmi
src/Printf.cmi already failed
============> printf.cmi
printf.cmi already failed
============> Printf.cmi
Printf.cmi already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_eof_packet.cmo src/mp_eof_packet.ml
resource_changed: src/mp_eof_packet.cmo
resource_changed: src/mp_eof_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_eof_packet )
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_binary.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_com.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_data.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_data_process.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_eof_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_field.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_field_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )"(
  [ src/mp_result_set_packet.cmo; src/mp_result_set_packet.cmi ]): "src/mp_raw_data.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_binary.cmi,
           src/mp_com.cmi,
           src/mp_data.cmi,
           src/mp_data_process.cmi,
           src/mp_eof_packet.cmi,
           src/mp_field.cmi,
           src/mp_field_packet.cmi,
           src/mp_packet.cmi,
           src/mp_raw_data.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet ): cache miss: a product is not in build dir (src/mp_result_set_packet.cmo)
==========> src/unix.cmi
============> src/unix.mli
==============> src/unix.mly
============> src/unix.mlpack
============> src/unix.ml
==============> src/unix.mll
==============> src/unix.mly
src/unix.mly already failed
==========> src/Unix.cmi
============> src/Unix.mli
==============> src/Unix.mly
============> src/Unix.mlpack
============> src/Unix.ml
==============> src/Unix.mll
==============> src/Unix.mly
src/Unix.mly already failed
==========> unix.cmi
============> unix.mli
==============> unix.mly
============> unix.mlpack
============> unix.ml
==============> unix.mll
==============> unix.mly
unix.mly already failed
==========> Unix.cmi
============> Unix.mli
==============> Unix.mly
============> Unix.mlpack
============> Unix.ml
==============> Unix.mll
==============> Unix.mly
Unix.mly already failed
>>> PARALLEL: 2
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_execute.cmo src/mp_execute.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_result_set_packet.cmo src/mp_result_set_packet.ml
<<< PARALLEL
resource_changed: src/mp_execute.cmo
resource_changed: src/mp_execute.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_execute )
resource_changed: src/mp_result_set_packet.cmo
resource_changed: src/mp_result_set_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_result_set_packet )
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_capabilities.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_charset.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_data.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_execute.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_field.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_field_packet.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_handshake.cmi"
new dyndep for "ocaml: mli -> cmi (%=src/mp_client )"([ src/mp_client.cmi ]): "src/mp_result_set_packet.cmi"
dyndeps: {.
           src/mp_capabilities.cmi,
           src/mp_charset.cmi,
           src/mp_data.cmi,
           src/mp_execute.cmi,
           src/mp_field.cmi,
           src/mp_field_packet.cmi,
           src/mp_handshake.cmi,
           src/mp_result_set_packet.cmi
         .}
mid rule ocaml: mli -> cmi (%=src/mp_client ): cache miss: a product is not in build dir (src/mp_client.cmi)
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_client.cmi src/mp_client.mli
resource_changed: src/mp_client.cmi
end rule ocaml: mli -> cmi (%=src/mp_client )
========> src/mp_client.mlpack
========> src/mp_client.mlpack
src/mp_client.mlpack already failed
========> src/mp_client.mli
src/mp_client.mli already built
========> src/mp_client.ml
src/mp_client.ml exists in source dir -> import it
========> src/mp_client.ml.depends
==========> src/mp_client.ml
src/mp_client.ml already built
start rule ocaml dependencies ml (%=src/mp_client )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_client ): cache miss: a product is not in build dir (src/mp_client.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_client.ml > src/mp_client.ml.depends
resource_changed: src/mp_client.ml.depends
end rule ocaml dependencies ml (%=src/mp_client )
========> src/mp_client.cmi
src/mp_client.cmi already built
start rule ocaml: ml & cmi -> cmo (%=src/mp_client )
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_authentication.cmi
src/mp_authentication.cmi already built
========> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
========> src/mp_capabilities.cmi
src/mp_capabilities.cmi already built
========> src/mp_change_user.cmi
src/mp_change_user.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_change_user.cmo src/mp_change_user.ml
resource_changed: src/mp_change_user.cmo
resource_changed: src/mp_change_user.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_change_user )
========> src/mp_charset.cmi
src/mp_charset.cmi already built
========> src/mp_com.cmi
src/mp_com.cmi already built
========> src/mp_error_packet.cmi
==========> src/mp_error_packet.mli
============> src/mp_error_packet.mly
==========> src/mp_error_packet.mlpack
==========> src/mp_error_packet.ml
src/mp_error_packet.ml exists in source dir -> import it
==========> src/mp_error_packet.ml.depends
============> src/mp_error_packet.ml
src/mp_error_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_error_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_error_packet ): cache miss: a product is not in build dir (src/mp_error_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_error_packet.ml > src/mp_error_packet.ml.depends
resource_changed: src/mp_error_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_error_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_error_packet )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_error_packet ): cache miss: a product is not in build dir (src/mp_error_packet.cmo)
========> src/mp_execute.cmi
src/mp_execute.cmi already built
========> src/mp_fetch.cmi
==========> src/mp_fetch.mli
============> src/mp_fetch.mly
==========> src/mp_fetch.mlpack
==========> src/mp_fetch.ml
src/mp_fetch.ml exists in source dir -> import it
==========> src/mp_fetch.ml.depends
============> src/mp_fetch.ml
src/mp_fetch.ml already built
start rule ocaml dependencies ml (%=src/mp_fetch )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_fetch ): cache miss: a product is not in build dir (src/mp_fetch.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_fetch.ml > src/mp_fetch.ml.depends
resource_changed: src/mp_fetch.ml.depends
end rule ocaml dependencies ml (%=src/mp_fetch )
start rule ocaml: ml -> cmo & cmi (%=src/mp_fetch )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_fetch )"([ src/mp_fetch.cmo;
                                                            src/mp_fetch.cmi
                                                            ]): "src/mp_bitstring.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_bitstring.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_fetch ): cache miss: a product is not in build dir (src/mp_fetch.cmo)
========> src/mp_field.cmi
src/mp_field.cmi already built
========> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
========> src/mp_handshake.cmi
src/mp_handshake.cmi already built
========> src/mp_ok_packet.cmi
==========> src/mp_ok_packet.mli
============> src/mp_ok_packet.mly
==========> src/mp_ok_packet.mlpack
==========> src/mp_ok_packet.ml
src/mp_ok_packet.ml exists in source dir -> import it
==========> src/mp_ok_packet.ml.depends
============> src/mp_ok_packet.ml
src/mp_ok_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_ok_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_ok_packet ): cache miss: a product is not in build dir (src/mp_ok_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_ok_packet.ml > src/mp_ok_packet.ml.depends
resource_changed: src/mp_ok_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_ok_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_ok_packet )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_binary.cmi
src/mp_binary.cmi already built
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_ok_packet )"([
                                                                src/mp_ok_packet.cmo;
                                                                src/mp_ok_packet.cmi
                                                                ]): "src/mp_binary.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {. src/mp_binary.cmi .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_ok_packet ): cache miss: a product is not in build dir (src/mp_ok_packet.cmo)
========> src/mp_ok_prepare_packet.cmi
==========> src/mp_ok_prepare_packet.mli
============> src/mp_ok_prepare_packet.mly
==========> src/mp_ok_prepare_packet.mlpack
==========> src/mp_ok_prepare_packet.ml
src/mp_ok_prepare_packet.ml exists in source dir -> import it
==========> src/mp_ok_prepare_packet.ml.depends
============> src/mp_ok_prepare_packet.ml
src/mp_ok_prepare_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_ok_prepare_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_ok_prepare_packet ): cache miss: a product is not in build dir (src/mp_ok_prepare_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_ok_prepare_packet.ml > src/mp_ok_prepare_packet.ml.depends
resource_changed: src/mp_ok_prepare_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_ok_prepare_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/list.cmi
src/list.cmi already failed
==========> src/List.cmi
src/List.cmi already failed
==========> list.cmi
list.cmi already failed
==========> List.cmi
List.cmi already failed
==========> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
==========> src/mp_eof_packet.cmi
src/mp_eof_packet.cmi already built
==========> src/mp_field.cmi
src/mp_field.cmi already built
==========> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )"(
  [ src/mp_ok_prepare_packet.cmo; src/mp_ok_prepare_packet.cmi ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )"(
  [ src/mp_ok_prepare_packet.cmo; src/mp_ok_prepare_packet.cmi ]): "src/mp_eof_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )"(
  [ src/mp_ok_prepare_packet.cmo; src/mp_ok_prepare_packet.cmi ]): "src/mp_field.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )"(
  [ src/mp_ok_prepare_packet.cmo; src/mp_ok_prepare_packet.cmi ]): "src/mp_field_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_bitstring.cmi,
           src/mp_eof_packet.cmi,
           src/mp_field.cmi,
           src/mp_field_packet.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet ): cache miss: a product is not in build dir (src/mp_ok_prepare_packet.cmo)
========> src/mp_result_packet.cmi
==========> src/mp_result_packet.mli
============> src/mp_result_packet.mly
==========> src/mp_result_packet.mlpack
==========> src/mp_result_packet.ml
src/mp_result_packet.ml exists in source dir -> import it
==========> src/mp_result_packet.ml.depends
============> src/mp_result_packet.ml
src/mp_result_packet.ml already built
start rule ocaml dependencies ml (%=src/mp_result_packet )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_result_packet ): cache miss: a product is not in build dir (src/mp_result_packet.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_result_packet.ml > src/mp_result_packet.ml.depends
resource_changed: src/mp_result_packet.ml.depends
end rule ocaml dependencies ml (%=src/mp_result_packet )
start rule ocaml: ml -> cmo & cmi (%=src/mp_result_packet )
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_com.cmi
src/mp_com.cmi already built
==========> src/mp_eof_packet.cmi
src/mp_eof_packet.cmi already built
==========> src/mp_error_packet.cmi
src/mp_error_packet.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_error_packet.cmo src/mp_error_packet.ml
resource_changed: src/mp_error_packet.cmo
resource_changed: src/mp_error_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_error_packet )
==========> src/mp_ok_packet.cmi
src/mp_ok_packet.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_ok_packet.cmo src/mp_ok_packet.ml
resource_changed: src/mp_ok_packet.cmo
resource_changed: src/mp_ok_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_ok_packet )
==========> src/mp_ok_prepare_packet.cmi
src/mp_ok_prepare_packet.cmi was suspended -> resuming
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_ok_prepare_packet.cmo src/mp_ok_prepare_packet.ml
resource_changed: src/mp_ok_prepare_packet.cmo
resource_changed: src/mp_ok_prepare_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_ok_prepare_packet )
==========> src/mp_packet.cmi
src/mp_packet.cmi already built
==========> src/mp_result_set_packet.cmi
src/mp_result_set_packet.cmi already built
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_com.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_eof_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_error_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_ok_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_ok_prepare_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_packet.cmi"
new dyndep for "ocaml: ml -> cmo & cmi (%=src/mp_result_packet )"([
                                                                    src/mp_result_packet.cmo;
                                                                    src/mp_result_packet.cmi
                                                                    ]): "src/mp_result_set_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_com.cmi,
           src/mp_eof_packet.cmi,
           src/mp_error_packet.cmi,
           src/mp_ok_packet.cmi,
           src/mp_ok_prepare_packet.cmi,
           src/mp_packet.cmi,
           src/mp_result_set_packet.cmi
         .}
mid rule ocaml: ml -> cmo & cmi (%=src/mp_result_packet ): cache miss: a product is not in build dir (src/mp_result_packet.cmo)
========> src/mp_result_set_packet.cmi
src/mp_result_set_packet.cmi already built
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
========> src/unix.cmi
src/unix.cmi already failed
========> src/Unix.cmi
src/Unix.cmi already failed
========> unix.cmi
unix.cmi already failed
========> Unix.cmi
Unix.cmi already failed
>>> PARALLEL: 2
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_fetch.cmo src/mp_fetch.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_result_packet.cmo src/mp_result_packet.ml
<<< PARALLEL
resource_changed: src/mp_fetch.cmo
resource_changed: src/mp_fetch.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_fetch )
resource_changed: src/mp_result_packet.cmo
resource_changed: src/mp_result_packet.cmi
end rule ocaml: ml -> cmo & cmi (%=src/mp_result_packet )
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_authentication.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_bitstring.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_capabilities.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_change_user.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_charset.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_com.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_error_packet.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_execute.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_fetch.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_field.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_field_packet.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_handshake.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_ok_packet.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_ok_prepare_packet.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_result_packet.cmi"
new dyndep for "ocaml: ml & cmi -> cmo (%=src/mp_client )"([
                                                             src/mp_client.cmo
                                                             ]): "src/mp_result_set_packet.cmi"
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.
           src/mp_authentication.cmi,
           src/mp_bitstring.cmi,
           src/mp_capabilities.cmi,
           src/mp_change_user.cmi,
           src/mp_charset.cmi,
           src/mp_com.cmi,
           src/mp_error_packet.cmi,
           src/mp_execute.cmi,
           src/mp_fetch.cmi,
           src/mp_field.cmi,
           src/mp_field_packet.cmi,
           src/mp_handshake.cmi,
           src/mp_ok_packet.cmi,
           src/mp_ok_prepare_packet.cmi,
           src/mp_result_packet.cmi,
           src/mp_result_set_packet.cmi
         .}
mid rule ocaml: ml & cmi -> cmo (%=src/mp_client ): cache miss: a product is not in build dir (src/mp_client.cmo)
======> src/mp_com.cmo
src/mp_com.cmo already built
======> src/mp_data.cmo
========> src/mp_data.mli
src/mp_data.mli already built
========> src/mp_data.cmi
src/mp_data.cmi already built
========> src/mp_data.mlpack
========> src/mp_data.mlpack
src/mp_data.mlpack already failed
========> src/mp_data.mli
src/mp_data.mli already built
========> src/mp_data.ml
src/mp_data.ml exists in source dir -> import it
========> src/mp_data.ml.depends
==========> src/mp_data.ml
src/mp_data.ml already built
start rule ocaml dependencies ml (%=src/mp_data )
dyndeps: {.  .}
mid rule ocaml dependencies ml (%=src/mp_data ): cache miss: a product is not in build dir (src/mp_data.ml.depends)
ocamlfind ocamldep -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -modules src/mp_data.ml > src/mp_data.ml.depends
resource_changed: src/mp_data.ml.depends
end rule ocaml dependencies ml (%=src/mp_data )
========> src/mp_data.cmi
src/mp_data.cmi already built
start rule ocaml: ml & cmi -> cmo (%=src/mp_data )
========> src/big_int.cmi
src/big_int.cmi already failed
========> src/Big_int.cmi
src/Big_int.cmi already failed
========> big_int.cmi
big_int.cmi already failed
========> Big_int.cmi
Big_int.cmi already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/buffer.cmi
src/buffer.cmi already failed
========> src/Buffer.cmi
src/Buffer.cmi already failed
========> buffer.cmi
buffer.cmi already failed
========> Buffer.cmi
Buffer.cmi already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/num.cmi
src/num.cmi already failed
========> src/Num.cmi
src/Num.cmi already failed
========> num.cmi
num.cmi already failed
========> Num.cmi
Num.cmi already failed
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
Warning: Failed to build the module Bitstring requested by ocamldep
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmo (%=src/mp_data ): cache miss: a product is not in build dir (src/mp_data.cmo)
======> src/mp_data_binary.cmo
src/mp_data_binary.cmo already built
======> src/mp_data_process.cmo
src/mp_data_process.cmo already built
======> src/mp_data_simple.cmo
src/mp_data_simple.cmo already built
======> src/mp_eof_packet.cmo
src/mp_eof_packet.cmo already built
======> src/mp_error_packet.cmo
src/mp_error_packet.cmo already built
======> src/mp_execute.cmo
src/mp_execute.cmo already built
======> src/mp_fetch.cmo
src/mp_fetch.cmo already built
======> src/mp_field.cmo
src/mp_field.cmo already built
======> src/mp_field_packet.cmo
src/mp_field_packet.cmo already built
======> src/mp_handshake.cmo
src/mp_handshake.cmo already built
======> src/mp_ok_packet.cmo
src/mp_ok_packet.cmo already built
======> src/mp_ok_prepare_packet.cmo
src/mp_ok_prepare_packet.cmo already built
======> src/mp_packet.cmo
src/mp_packet.cmo already built
======> src/mp_protocol.cmo
src/mp_protocol.cmo already built
======> src/mp_raw_data.cmo
src/mp_raw_data.cmo already built
======> src/mp_result_packet.cmo
src/mp_result_packet.cmo already built
======> src/mp_result_set_packet.cmo
src/mp_result_set_packet.cmo already built
======> src/mp_string.cmo
src/mp_string.cmo already built
>>> PARALLEL: 3
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_charset.cmo src/mp_charset.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_client.cmo src/mp_client.ml
ocamlfind ocamlc -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -package unix -I src -o src/mp_data.cmo src/mp_data.ml
<<< PARALLEL
resource_changed: src/mp_charset.cmo
end rule ocaml: ml & cmi -> cmo (%=src/mp_charset )
resource_changed: src/mp_client.cmo
end rule ocaml: ml & cmi -> cmo (%=src/mp_client )
resource_changed: src/mp_data.cmo
end rule ocaml: ml & cmi -> cmo (%=src/mp_data )
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_authentication.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_binary.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_bitstring.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_capabilities.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_change_user.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_charset.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_client.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_com.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_binary.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_process.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_simple.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_eof_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_error_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_execute.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_fetch.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_field.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_field_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_handshake.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_ok_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_ok_prepare_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_protocol.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_raw_data.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_result_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_result_set_packet.cmo"
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_string.cmo"
======> src/mp_authentication.cmi
src/mp_authentication.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_authentication.cmi"
======> src/mp_binary.cmi
src/mp_binary.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_binary.cmi"
======> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_bitstring.cmi"
======> src/mp_capabilities.cmi
src/mp_capabilities.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_capabilities.cmi"
======> src/mp_change_user.cmi
src/mp_change_user.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_change_user.cmi"
======> src/mp_charset.cmi
src/mp_charset.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_charset.cmi"
======> src/mp_client.cmi
src/mp_client.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_client.cmi"
======> src/mp_com.cmi
src/mp_com.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_com.cmi"
======> src/mp_data.cmi
src/mp_data.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data.cmi"
======> src/mp_data_binary.cmi
src/mp_data_binary.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_binary.cmi"
======> src/mp_data_process.cmi
src/mp_data_process.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_process.cmi"
======> src/mp_data_simple.cmi
src/mp_data_simple.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_data_simple.cmi"
======> src/mp_eof_packet.cmi
src/mp_eof_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_eof_packet.cmi"
======> src/mp_error_packet.cmi
src/mp_error_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_error_packet.cmi"
======> src/mp_execute.cmi
src/mp_execute.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_execute.cmi"
======> src/mp_fetch.cmi
src/mp_fetch.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_fetch.cmi"
======> src/mp_field.cmi
src/mp_field.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_field.cmi"
======> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_field_packet.cmi"
======> src/mp_handshake.cmi
src/mp_handshake.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_handshake.cmi"
======> src/mp_ok_packet.cmi
src/mp_ok_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_ok_packet.cmi"
======> src/mp_ok_prepare_packet.cmi
src/mp_ok_prepare_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_ok_prepare_packet.cmi"
======> src/mp_packet.cmi
src/mp_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_packet.cmi"
======> src/mp_protocol.cmi
src/mp_protocol.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_protocol.cmi"
======> src/mp_raw_data.cmi
src/mp_raw_data.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_raw_data.cmi"
======> src/mp_result_packet.cmi
src/mp_result_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_result_packet.cmi"
======> src/mp_result_set_packet.cmi
src/mp_result_set_packet.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_result_set_packet.cmi"
======> src/mp_string.cmi
src/mp_string.cmi already built
new dyndep for "ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )"(
  [ src/mysql_protocol.cmo; src/mysql_protocol.cmi ]): "src/mp_string.cmi"
caml_transitive_closure ~caml_obj_ext:"cmo" ~pack_mode:true
  ~used_libraries:[  ]
  [ "src/mp_authentication.cmo"; "src/mp_binary.cmo"; "src/mp_bitstring.cmo";
    "src/mp_capabilities.cmo"; "src/mp_change_user.cmo";
    "src/mp_charset.cmo"; "src/mp_client.cmo"; "src/mp_com.cmo";
    "src/mp_data.cmo"; "src/mp_data_binary.cmo"; "src/mp_data_process.cmo";
    "src/mp_data_simple.cmo"; "src/mp_eof_packet.cmo";
    "src/mp_error_packet.cmo"; "src/mp_execute.cmo"; "src/mp_fetch.cmo";
    "src/mp_field.cmo"; "src/mp_field_packet.cmo"; "src/mp_handshake.cmo";
    "src/mp_ok_packet.cmo"; "src/mp_ok_prepare_packet.cmo";
    "src/mp_packet.cmo"; "src/mp_protocol.cmo"; "src/mp_raw_data.cmo";
    "src/mp_result_packet.cmo"; "src/mp_result_set_packet.cmo";
    "src/mp_string.cmo" ]
packages: {. src/mysql_protocol.cmo .}
dependency_map:
  {:
      "src/mp_authentication.cmo" =>
        {.
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_handshake.cmo,
          src/mp_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_change_user.cmo" =>
        {. src/mp_authentication.cmo, src/mp_handshake.cmo, src/mp_string.cmo
        .};
      "src/mp_client.cmo" =>
        {.
          src/mp_authentication.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo
        .};
      "src/mp_com.cmo" => {. src/mp_packet.cmo .};
      "src/mp_data_binary.cmo" =>
        {. src/mp_bitstring.cmo, src/mp_data.cmo, src/mp_field_packet.cmo .};
      "src/mp_data_process.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_simple.cmo,
          src/mp_raw_data.cmo
        .};
      "src/mp_data_simple.cmo" =>
        {. src/mp_data.cmo, src/mp_field_packet.cmo .};
      "src/mp_eof_packet.cmo" => {. src/mp_packet.cmo .};
      "src/mp_execute.cmo" =>
        {. src/mp_bitstring.cmo, src/mp_data.cmo, src/mp_data_process.cmo .};
      "src/mp_fetch.cmo" => {. src/mp_bitstring.cmo .};
      "src/mp_field.cmo" => {. src/mp_field_packet.cmo .};
      "src/mp_field_packet.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_string.cmo
        .};
      "src/mp_handshake.cmo" =>
        {.
          src/mp_capabilities.cmo,
          src/mp_charset.cmo,
          src/mp_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_ok_packet.cmo" => {. src/mp_binary.cmo .};
      "src/mp_ok_prepare_packet.cmo" =>
        {.
          src/mp_bitstring.cmo,
          src/mp_eof_packet.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo
        .};
      "src/mp_raw_data.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_com.cmo,
          src/mp_field_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_result_packet.cmo" =>
        {.
          src/mp_com.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_result_set_packet.cmo
        .};
      "src/mp_result_set_packet.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_process.cmo,
          src/mp_eof_packet.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_packet.cmo,
          src/mp_raw_data.cmo
        .};
      "src/mp_string.cmo" => {. src/mp_binary.cmo .};
      "src/mysql_protocol.cmi" =>
        {.
          src/mp_authentication.cmo,
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_client.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_process.cmo,
          src/mp_data_simple.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_raw_data.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mysql_protocol.cmo" =>
        {.
          src/mp_authentication.cmo,
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_client.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_process.cmo,
          src/mp_data_simple.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_raw_data.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo,
          src/mp_string.cmo
        .};
  :}
used_files:
  {.
    src/mp_authentication.cmo,
    src/mp_binary.cmo,
    src/mp_bitstring.cmo,
    src/mp_capabilities.cmo,
    src/mp_change_user.cmo,
    src/mp_charset.cmo,
    src/mp_client.cmo,
    src/mp_com.cmo,
    src/mp_data.cmo,
    src/mp_data_binary.cmo,
    src/mp_data_process.cmo,
    src/mp_data_simple.cmo,
    src/mp_eof_packet.cmo,
    src/mp_error_packet.cmo,
    src/mp_execute.cmo,
    src/mp_fetch.cmo,
    src/mp_field.cmo,
    src/mp_field_packet.cmo,
    src/mp_handshake.cmo,
    src/mp_ok_packet.cmo,
    src/mp_ok_prepare_packet.cmo,
    src/mp_packet.cmo,
    src/mp_protocol.cmo,
    src/mp_raw_data.cmo,
    src/mp_result_packet.cmo,
    src/mp_result_set_packet.cmo,
    src/mp_string.cmo
  .}
open_packages: [  ]
lib_index: {::}
dependencies:
  {:
      "src/mp_authentication.cmo" =>
        {.
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_handshake.cmo,
          src/mp_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_change_user.cmo" =>
        {. src/mp_authentication.cmo, src/mp_handshake.cmo, src/mp_string.cmo
        .};
      "src/mp_client.cmo" =>
        {.
          src/mp_authentication.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo
        .};
      "src/mp_com.cmo" => {. src/mp_packet.cmo .};
      "src/mp_data_binary.cmo" =>
        {. src/mp_bitstring.cmo, src/mp_data.cmo, src/mp_field_packet.cmo .};
      "src/mp_data_process.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_simple.cmo,
          src/mp_raw_data.cmo
        .};
      "src/mp_data_simple.cmo" =>
        {. src/mp_data.cmo, src/mp_field_packet.cmo .};
      "src/mp_eof_packet.cmo" => {. src/mp_packet.cmo .};
      "src/mp_execute.cmo" =>
        {. src/mp_bitstring.cmo, src/mp_data.cmo, src/mp_data_process.cmo .};
      "src/mp_fetch.cmo" => {. src/mp_bitstring.cmo .};
      "src/mp_field.cmo" => {. src/mp_field_packet.cmo .};
      "src/mp_field_packet.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_string.cmo
        .};
      "src/mp_handshake.cmo" =>
        {.
          src/mp_capabilities.cmo,
          src/mp_charset.cmo,
          src/mp_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_ok_packet.cmo" => {. src/mp_binary.cmo .};
      "src/mp_ok_prepare_packet.cmo" =>
        {.
          src/mp_bitstring.cmo,
          src/mp_eof_packet.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo
        .};
      "src/mp_raw_data.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_com.cmo,
          src/mp_field_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mp_result_packet.cmo" =>
        {.
          src/mp_com.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_result_set_packet.cmo
        .};
      "src/mp_result_set_packet.cmo" =>
        {.
          src/mp_binary.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_process.cmo,
          src/mp_eof_packet.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_packet.cmo,
          src/mp_raw_data.cmo
        .};
      "src/mp_string.cmo" => {. src/mp_binary.cmo .};
      "src/mysql_protocol.cmi" =>
        {.
          src/mp_authentication.cmo,
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_client.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_process.cmo,
          src/mp_data_simple.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_raw_data.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo,
          src/mp_string.cmo
        .};
      "src/mysql_protocol.cmo" =>
        {.
          src/mp_authentication.cmo,
          src/mp_binary.cmo,
          src/mp_bitstring.cmo,
          src/mp_capabilities.cmo,
          src/mp_change_user.cmo,
          src/mp_charset.cmo,
          src/mp_client.cmo,
          src/mp_com.cmo,
          src/mp_data.cmo,
          src/mp_data_binary.cmo,
          src/mp_data_process.cmo,
          src/mp_data_simple.cmo,
          src/mp_eof_packet.cmo,
          src/mp_error_packet.cmo,
          src/mp_execute.cmo,
          src/mp_fetch.cmo,
          src/mp_field.cmo,
          src/mp_field_packet.cmo,
          src/mp_handshake.cmo,
          src/mp_ok_packet.cmo,
          src/mp_ok_prepare_packet.cmo,
          src/mp_packet.cmo,
          src/mp_protocol.cmo,
          src/mp_raw_data.cmo,
          src/mp_result_packet.cmo,
          src/mp_result_set_packet.cmo,
          src/mp_string.cmo
        .};
  :}
caml_transitive_closure:
  [ "src/mp_authentication.cmo"; "src/mp_binary.cmo"; "src/mp_bitstring.cmo";
    "src/mp_capabilities.cmo"; "src/mp_change_user.cmo";
    "src/mp_charset.cmo"; "src/mp_client.cmo"; "src/mp_com.cmo";
    "src/mp_data.cmo"; "src/mp_data_binary.cmo"; "src/mp_data_process.cmo";
    "src/mp_data_simple.cmo"; "src/mp_eof_packet.cmo";
    "src/mp_error_packet.cmo"; "src/mp_execute.cmo"; "src/mp_fetch.cmo";
    "src/mp_field.cmo"; "src/mp_field_packet.cmo"; "src/mp_handshake.cmo";
    "src/mp_ok_packet.cmo"; "src/mp_ok_prepare_packet.cmo";
    "src/mp_packet.cmo"; "src/mp_protocol.cmo"; "src/mp_raw_data.cmo";
    "src/mp_result_packet.cmo"; "src/mp_result_set_packet.cmo";
    "src/mp_string.cmo" ] ->
  [ "src/mp_client.cmo"; "src/mp_result_packet.cmo";
    "src/mp_result_set_packet.cmo"; "src/mp_ok_prepare_packet.cmo";
    "src/mp_eof_packet.cmo"; "src/mp_ok_packet.cmo"; "src/mp_field.cmo";
    "src/mp_fetch.cmo"; "src/mp_execute.cmo"; "src/mp_data_process.cmo";
    "src/mp_raw_data.cmo"; "src/mp_data_simple.cmo";
    "src/mp_data_binary.cmo"; "src/mp_field_packet.cmo";
    "src/mp_protocol.cmo"; "src/mp_error_packet.cmo"; "src/mp_data.cmo";
    "src/mp_com.cmo"; "src/mp_change_user.cmo"; "src/mp_authentication.cmo";
    "src/mp_handshake.cmo"; "src/mp_string.cmo"; "src/mp_binary.cmo";
    "src/mp_packet.cmo"; "src/mp_charset.cmo"; "src/mp_capabilities.cmo";
    "src/mp_bitstring.cmo" ]
dyndeps: {.
           src/mp_authentication.cmi,
           src/mp_authentication.cmo,
           src/mp_binary.cmi,
           src/mp_binary.cmo,
           src/mp_bitstring.cmi,
           src/mp_bitstring.cmo,
           src/mp_capabilities.cmi,
           src/mp_capabilities.cmo,
           src/mp_change_user.cmi,
           src/mp_change_user.cmo,
           src/mp_charset.cmi,
           src/mp_charset.cmo,
           src/mp_client.cmi,
           src/mp_client.cmo,
           src/mp_com.cmi,
           src/mp_com.cmo,
           src/mp_data.cmi,
           src/mp_data.cmo,
           src/mp_data_binary.cmi,
           src/mp_data_binary.cmo,
           src/mp_data_process.cmi,
           src/mp_data_process.cmo,
           src/mp_data_simple.cmi,
           src/mp_data_simple.cmo,
           src/mp_eof_packet.cmi,
           src/mp_eof_packet.cmo,
           src/mp_error_packet.cmi,
           src/mp_error_packet.cmo,
           src/mp_execute.cmi,
           src/mp_execute.cmo,
           src/mp_fetch.cmi,
           src/mp_fetch.cmo,
           src/mp_field.cmi,
           src/mp_field.cmo,
           src/mp_field_packet.cmi,
           src/mp_field_packet.cmo,
           src/mp_handshake.cmi,
           src/mp_handshake.cmo,
           src/mp_ok_packet.cmi,
           src/mp_ok_packet.cmo,
           src/mp_ok_prepare_packet.cmi,
           src/mp_ok_prepare_packet.cmo,
           src/mp_packet.cmi,
           src/mp_packet.cmo,
           src/mp_protocol.cmi,
           src/mp_protocol.cmo,
           src/mp_raw_data.cmi,
           src/mp_raw_data.cmo,
           src/mp_result_packet.cmi,
           src/mp_result_packet.cmo,
           src/mp_result_set_packet.cmi,
           src/mp_result_set_packet.cmo,
           src/mp_string.cmi,
           src/mp_string.cmo
         .}
mid rule ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol ): cache miss: a product is not in build dir (src/mysql_protocol.cmo)
====> src/mysql_protocol.cmx
======> src/mysql_protocol.mlpack
src/mysql_protocol.mlpack already built
======> src/mysql_protocol.cmi
src/mysql_protocol.cmi was suspended -> resuming
ocamlfind ocamlc -pack src/mp_bitstring.cmo src/mp_capabilities.cmo src/mp_charset.cmo src/mp_packet.cmo src/mp_binary.cmo src/mp_string.cmo src/mp_handshake.cmo src/mp_authentication.cmo src/mp_change_user.cmo src/mp_com.cmo src/mp_data.cmo src/mp_error_packet.cmo src/mp_protocol.cmo src/mp_field_packet.cmo src/mp_data_binary.cmo src/mp_data_simple.cmo src/mp_raw_data.cmo src/mp_data_process.cmo src/mp_execute.cmo src/mp_fetch.cmo src/mp_field.cmo src/mp_ok_packet.cmo src/mp_eof_packet.cmo src/mp_ok_prepare_packet.cmo src/mp_result_set_packet.cmo src/mp_result_packet.cmo src/mp_client.cmo -o src/mysql_protocol.cmo
resource_changed: src/mysql_protocol.cmo
resource_changed: src/mysql_protocol.cmi
end rule ocaml: mlpack & cmo* -> cmo & cmi (%=src/mysql_protocol )
start rule ocaml: mlpack & cmi & cmx* & o* -> cmx & o (%=src/mysql_protocol )
prepare_libs: "src/mysql_protocol.cmx" -> [  ]
======> src/mp_authentication.cmx
========> src/mp_authentication.mlpack
src/mp_authentication.mlpack already failed
========> src/mp_authentication.ml
src/mp_authentication.ml already built
========> src/mp_authentication.ml.depends
src/mp_authentication.ml.depends already built
========> src/mp_authentication.cmi
src/mp_authentication.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )
========> src/bitstring.cmx
==========> src/bitstring.mlpack
src/bitstring.mlpack already failed
==========> src/bitstring.ml
src/bitstring.ml already failed
========> src/Bitstring.cmx
==========> src/Bitstring.mlpack
src/Bitstring.mlpack already failed
==========> src/Bitstring.ml
src/Bitstring.ml already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
==========> bitstring.mlpack
bitstring.mlpack already failed
==========> bitstring.ml
bitstring.ml already failed
========> Bitstring.cmx
==========> Bitstring.mlpack
Bitstring.mlpack already failed
==========> Bitstring.ml
Bitstring.ml already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
==========> src/char.mlpack
src/char.mlpack already failed
==========> src/char.ml
src/char.ml already failed
========> src/Char.cmx
==========> src/Char.mlpack
src/Char.mlpack already failed
==========> src/Char.ml
src/Char.ml already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
==========> char.mlpack
char.mlpack already failed
==========> char.ml
char.ml already failed
========> Char.cmx
==========> Char.mlpack
Char.mlpack already failed
==========> Char.ml
Char.ml already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/cryptokit.cmx
==========> src/cryptokit.mlpack
src/cryptokit.mlpack already failed
==========> src/cryptokit.ml
src/cryptokit.ml already failed
========> src/Cryptokit.cmx
==========> src/Cryptokit.mlpack
src/Cryptokit.mlpack already failed
==========> src/Cryptokit.ml
src/Cryptokit.ml already failed
========> src/cryptokit.cmi
src/cryptokit.cmi already failed
========> src/Cryptokit.cmi
src/Cryptokit.cmi already failed
========> cryptokit.cmx
==========> cryptokit.mlpack
cryptokit.mlpack already failed
==========> cryptokit.ml
cryptokit.ml already failed
========> Cryptokit.cmx
==========> Cryptokit.mlpack
Cryptokit.mlpack already failed
==========> Cryptokit.ml
Cryptokit.ml already failed
========> cryptokit.cmi
cryptokit.cmi already failed
========> Cryptokit.cmi
Cryptokit.cmi already failed
========> src/int64.cmx
==========> src/int64.mlpack
src/int64.mlpack already failed
==========> src/int64.ml
src/int64.ml already failed
========> src/Int64.cmx
==========> src/Int64.mlpack
src/Int64.mlpack already failed
==========> src/Int64.ml
src/Int64.ml already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
==========> int64.mlpack
int64.mlpack already failed
==========> int64.ml
int64.ml already failed
========> Int64.cmx
==========> Int64.mlpack
Int64.mlpack already failed
==========> Int64.ml
Int64.ml already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_bitstring.cmx
==========> src/mp_bitstring.mlpack
src/mp_bitstring.mlpack already failed
==========> src/mp_bitstring.ml
src/mp_bitstring.ml already built
==========> src/mp_bitstring.ml.depends
src/mp_bitstring.ml.depends already built
==========> src/mp_bitstring.cmi
src/mp_bitstring.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_bitstring )
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_bitstring ): cache miss: a product is not in build dir (src/mp_bitstring.cmx)
========> src/mp_capabilities.cmx
==========> src/mp_capabilities.mlpack
src/mp_capabilities.mlpack already failed
==========> src/mp_capabilities.ml
src/mp_capabilities.ml already built
==========> src/mp_capabilities.ml.depends
src/mp_capabilities.ml.depends already built
==========> src/mp_capabilities.cmi
src/mp_capabilities.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_capabilities )
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/list.cmx
============> src/list.mlpack
src/list.mlpack already failed
============> src/list.ml
src/list.ml already failed
==========> src/List.cmx
============> src/List.mlpack
src/List.mlpack already failed
============> src/List.ml
src/List.ml already failed
==========> src/list.cmi
src/list.cmi already failed
==========> src/List.cmi
src/List.cmi already failed
==========> list.cmx
============> list.mlpack
list.mlpack already failed
============> list.ml
list.ml already failed
==========> List.cmx
============> List.mlpack
List.mlpack already failed
============> List.ml
List.ml already failed
==========> list.cmi
list.cmi already failed
==========> List.cmi
List.cmi already failed
==========> src/string.cmx
============> src/string.mlpack
src/string.mlpack already failed
============> src/string.ml
src/string.ml already failed
==========> src/String.cmx
============> src/String.mlpack
src/String.mlpack already failed
============> src/String.ml
src/String.ml already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
============> string.mlpack
string.mlpack already failed
============> string.ml
string.ml already failed
==========> String.cmx
============> String.mlpack
String.mlpack already failed
============> String.ml
String.ml already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_capabilities ): cache miss: a product is not in build dir (src/mp_capabilities.cmx)
========> src/mp_handshake.cmx
==========> src/mp_handshake.mlpack
src/mp_handshake.mlpack already failed
==========> src/mp_handshake.ml
src/mp_handshake.ml already built
==========> src/mp_handshake.ml.depends
src/mp_handshake.ml.depends already built
==========> src/mp_handshake.cmi
src/mp_handshake.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmx
src/char.cmx already failed
==========> src/Char.cmx
src/Char.cmx already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmx
char.cmx already failed
==========> Char.cmx
Char.cmx already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/int32.cmx
============> src/int32.mlpack
src/int32.mlpack already failed
============> src/int32.ml
src/int32.ml already failed
==========> src/Int32.cmx
============> src/Int32.mlpack
src/Int32.mlpack already failed
============> src/Int32.ml
src/Int32.ml already failed
==========> src/int32.cmi
src/int32.cmi already failed
==========> src/Int32.cmi
src/Int32.cmi already failed
==========> int32.cmx
============> int32.mlpack
int32.mlpack already failed
============> int32.ml
int32.ml already failed
==========> Int32.cmx
============> Int32.mlpack
Int32.mlpack already failed
============> Int32.ml
Int32.ml already failed
==========> int32.cmi
int32.cmi already failed
==========> Int32.cmi
Int32.cmi already failed
==========> src/int64.cmx
src/int64.cmx already failed
==========> src/Int64.cmx
src/Int64.cmx already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmx
int64.cmx already failed
==========> Int64.cmx
Int64.cmx already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_capabilities.cmx
src/mp_capabilities.cmx was suspended -> resuming
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_capabilities.cmx src/mp_capabilities.ml
resource_changed: src/mp_capabilities.cmx
resource_changed: src/mp_capabilities.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_capabilities )
==========> src/mp_charset.cmx
============> src/mp_charset.mlpack
src/mp_charset.mlpack already failed
============> src/mp_charset.ml
src/mp_charset.ml already built
============> src/mp_charset.ml.depends
src/mp_charset.ml.depends already built
============> src/mp_charset.cmi
src/mp_charset.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_charset )
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_charset ): cache miss: a product is not in build dir (src/mp_charset.cmx)
==========> src/mp_packet.cmx
============> src/mp_packet.mlpack
src/mp_packet.mlpack already failed
============> src/mp_packet.ml
src/mp_packet.ml already built
============> src/mp_packet.ml.depends
src/mp_packet.ml.depends already built
============> src/mp_packet.cmi
src/mp_packet.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_packet )
============> src/bitstring.cmx
src/bitstring.cmx already failed
============> src/Bitstring.cmx
src/Bitstring.cmx already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmx
bitstring.cmx already failed
============> Bitstring.cmx
Bitstring.cmx already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmx
src/char.cmx already failed
============> src/Char.cmx
src/Char.cmx already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmx
char.cmx already failed
============> Char.cmx
Char.cmx already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/string.cmx
src/string.cmx already failed
============> src/String.cmx
src/String.cmx already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmx
string.cmx already failed
============> String.cmx
String.cmx already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
============> src/sys.cmx
==============> src/sys.mlpack
src/sys.mlpack already failed
==============> src/sys.ml
src/sys.ml already failed
============> src/Sys.cmx
==============> src/Sys.mlpack
src/Sys.mlpack already failed
==============> src/Sys.ml
src/Sys.ml already failed
============> src/sys.cmi
src/sys.cmi already failed
============> src/Sys.cmi
src/Sys.cmi already failed
============> sys.cmx
==============> sys.mlpack
sys.mlpack already failed
==============> sys.ml
sys.ml already failed
============> Sys.cmx
==============> Sys.mlpack
Sys.mlpack already failed
==============> Sys.ml
Sys.ml already failed
============> sys.cmi
sys.cmi already failed
============> Sys.cmi
Sys.cmi already failed
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_packet ): cache miss: a product is not in build dir (src/mp_packet.cmx)
==========> src/mp_string.cmx
============> src/mp_string.mlpack
src/mp_string.mlpack already failed
============> src/mp_string.ml
src/mp_string.ml already built
============> src/mp_string.ml.depends
src/mp_string.ml.depends already built
============> src/mp_string.cmi
src/mp_string.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_string )
============> src/bitstring.cmx
src/bitstring.cmx already failed
============> src/Bitstring.cmx
src/Bitstring.cmx already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmx
bitstring.cmx already failed
============> Bitstring.cmx
Bitstring.cmx already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmx
src/char.cmx already failed
============> src/Char.cmx
src/Char.cmx already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmx
char.cmx already failed
============> Char.cmx
Char.cmx already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/int64.cmx
src/int64.cmx already failed
============> src/Int64.cmx
src/Int64.cmx already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmx
int64.cmx already failed
============> Int64.cmx
Int64.cmx already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/mp_binary.cmx
==============> src/mp_binary.mlpack
src/mp_binary.mlpack already failed
==============> src/mp_binary.ml
src/mp_binary.ml already built
==============> src/mp_binary.ml.depends
src/mp_binary.ml.depends already built
==============> src/mp_binary.cmi
src/mp_binary.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_binary )
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/printf.cmx
================> src/printf.mlpack
src/printf.mlpack already failed
================> src/printf.ml
src/printf.ml already failed
==============> src/Printf.cmx
================> src/Printf.mlpack
src/Printf.mlpack already failed
================> src/Printf.ml
src/Printf.ml already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
================> printf.mlpack
printf.mlpack already failed
================> printf.ml
printf.ml already failed
==============> Printf.cmx
================> Printf.mlpack
Printf.mlpack already failed
================> Printf.ml
Printf.ml already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_binary ): cache miss: a product is not in build dir (src/mp_binary.cmx)
============> src/string.cmx
src/string.cmx already failed
============> src/String.cmx
src/String.cmx already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmx
string.cmx already failed
============> String.cmx
String.cmx already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_binary.cmx src/mp_binary.ml
resource_changed: src/mp_binary.cmx
resource_changed: src/mp_binary.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_binary )
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_string )"([
                                                                 src/mp_string.cmx;
                                                                 src/mp_string.o
                                                                 ]): "src/mp_binary.cmx"
============> src/bitstring.cmx
src/bitstring.cmx already failed
============> src/Bitstring.cmx
src/Bitstring.cmx already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmx
bitstring.cmx already failed
============> Bitstring.cmx
Bitstring.cmx already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/char.cmx
src/char.cmx already failed
============> src/Char.cmx
src/Char.cmx already failed
============> src/char.cmi
src/char.cmi already failed
============> src/Char.cmi
src/Char.cmi already failed
============> char.cmx
char.cmx already failed
============> Char.cmx
Char.cmx already failed
============> char.cmi
char.cmi already failed
============> Char.cmi
Char.cmi already failed
============> src/int64.cmx
src/int64.cmx already failed
============> src/Int64.cmx
src/Int64.cmx already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmx
int64.cmx already failed
============> Int64.cmx
Int64.cmx already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/printf.cmx
src/printf.cmx already failed
============> src/Printf.cmx
src/Printf.cmx already failed
============> src/printf.cmi
src/printf.cmi already failed
============> src/Printf.cmi
src/Printf.cmi already failed
============> printf.cmx
printf.cmx already failed
============> Printf.cmx
Printf.cmx already failed
============> printf.cmi
printf.cmi already failed
============> Printf.cmi
Printf.cmi already failed
============> src/string.cmx
src/string.cmx already failed
============> src/String.cmx
src/String.cmx already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmx
string.cmx already failed
============> String.cmx
String.cmx already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
dyndeps: {. src/mp_binary.cmx .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_string ): cache miss: a product is not in build dir (src/mp_string.cmx)
==========> src/printf.cmx
src/printf.cmx already failed
==========> src/Printf.cmx
src/Printf.cmx already failed
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmx
printf.cmx already failed
==========> Printf.cmx
Printf.cmx already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
>>> PARALLEL: 3
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_charset.cmx src/mp_charset.ml
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_packet.cmx src/mp_packet.ml
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_string.cmx src/mp_string.ml
<<< PARALLEL
resource_changed: src/mp_charset.cmx
resource_changed: src/mp_charset.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_charset )
resource_changed: src/mp_packet.cmx
resource_changed: src/mp_packet.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_packet )
resource_changed: src/mp_string.cmx
resource_changed: src/mp_string.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_string )
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )"([
                                                                    src/mp_handshake.cmx;
                                                                    src/mp_handshake.o
                                                                    ]): "src/mp_capabilities.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )"([
                                                                    src/mp_handshake.cmx;
                                                                    src/mp_handshake.o
                                                                    ]): "src/mp_charset.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )"([
                                                                    src/mp_handshake.cmx;
                                                                    src/mp_handshake.o
                                                                    ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )"([
                                                                    src/mp_handshake.cmx;
                                                                    src/mp_handshake.o
                                                                    ]): "src/mp_string.cmx"
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/list.cmx
src/list.cmx already failed
==========> src/List.cmx
src/List.cmx already failed
==========> src/list.cmi
src/list.cmi already failed
==========> src/List.cmi
src/List.cmi already failed
==========> list.cmx
list.cmx already failed
==========> List.cmx
List.cmx already failed
==========> list.cmi
list.cmi already failed
==========> List.cmi
List.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmx
src/char.cmx already failed
==========> src/Char.cmx
src/Char.cmx already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmx
char.cmx already failed
==========> Char.cmx
Char.cmx already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
==========> src/sys.cmx
src/sys.cmx already failed
==========> src/Sys.cmx
src/Sys.cmx already failed
==========> src/sys.cmi
src/sys.cmi already failed
==========> src/Sys.cmi
src/Sys.cmi already failed
==========> sys.cmx
sys.cmx already failed
==========> Sys.cmx
Sys.cmx already failed
==========> sys.cmi
sys.cmi already failed
==========> Sys.cmi
Sys.cmi already failed
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmx
src/char.cmx already failed
==========> src/Char.cmx
src/Char.cmx already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmx
char.cmx already failed
==========> Char.cmx
Char.cmx already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/int64.cmx
src/int64.cmx already failed
==========> src/Int64.cmx
src/Int64.cmx already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmx
int64.cmx already failed
==========> Int64.cmx
Int64.cmx already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/mp_binary.cmx
src/mp_binary.cmx already built
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )"([
                                                                    src/mp_handshake.cmx;
                                                                    src/mp_handshake.o
                                                                    ]): "src/mp_binary.cmx"
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmx
src/char.cmx already failed
==========> src/Char.cmx
src/Char.cmx already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmx
char.cmx already failed
==========> Char.cmx
Char.cmx already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/int64.cmx
src/int64.cmx already failed
==========> src/Int64.cmx
src/Int64.cmx already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmx
int64.cmx already failed
==========> Int64.cmx
Int64.cmx already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/printf.cmx
src/printf.cmx already failed
==========> src/Printf.cmx
src/Printf.cmx already failed
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmx
printf.cmx already failed
==========> Printf.cmx
Printf.cmx already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_capabilities.cmx,
           src/mp_charset.cmx,
           src/mp_packet.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_handshake ): cache miss: a product is not in build dir (src/mp_handshake.cmx)
========> src/mp_packet.cmx
src/mp_packet.cmx already built
========> src/mp_string.cmx
src/mp_string.cmx already built
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
>>> PARALLEL: 2
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_bitstring.cmx src/mp_bitstring.ml
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_handshake.cmx src/mp_handshake.ml
<<< PARALLEL
resource_changed: src/mp_bitstring.cmx
resource_changed: src/mp_bitstring.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_bitstring )
resource_changed: src/mp_handshake.cmx
resource_changed: src/mp_handshake.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_handshake )
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_capabilities.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_handshake.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_string.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/list.cmx
src/list.cmx already failed
========> src/List.cmx
src/List.cmx already failed
========> src/list.cmi
src/list.cmi already failed
========> src/List.cmi
src/List.cmi already failed
========> list.cmx
list.cmx already failed
========> List.cmx
List.cmx already failed
========> list.cmi
list.cmi already failed
========> List.cmi
List.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int32.cmx
src/int32.cmx already failed
========> src/Int32.cmx
src/Int32.cmx already failed
========> src/int32.cmi
src/int32.cmi already failed
========> src/Int32.cmi
src/Int32.cmi already failed
========> int32.cmx
int32.cmx already failed
========> Int32.cmx
Int32.cmx already failed
========> int32.cmi
int32.cmi already failed
========> Int32.cmi
Int32.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_capabilities.cmx
src/mp_capabilities.cmx already built
========> src/mp_charset.cmx
src/mp_charset.cmx already built
========> src/mp_packet.cmx
src/mp_packet.cmx already built
========> src/mp_string.cmx
src/mp_string.cmx already built
========> src/printf.cmx
src/printf.cmx already failed
========> src/Printf.cmx
src/Printf.cmx already failed
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmx
printf.cmx already failed
========> Printf.cmx
Printf.cmx already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_capabilities.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_charset.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_string.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
========> src/sys.cmx
src/sys.cmx already failed
========> src/Sys.cmx
src/Sys.cmx already failed
========> src/sys.cmi
src/sys.cmi already failed
========> src/Sys.cmi
src/Sys.cmi already failed
========> sys.cmx
sys.cmx already failed
========> Sys.cmx
Sys.cmx already failed
========> sys.cmi
sys.cmi already failed
========> Sys.cmi
Sys.cmi already failed
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_binary.cmx
src/mp_binary.cmx already built
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )"(
  [ src/mp_authentication.cmx; src/mp_authentication.o ]): "src/mp_binary.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/printf.cmx
src/printf.cmx already failed
========> src/Printf.cmx
src/Printf.cmx already failed
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmx
printf.cmx already failed
========> Printf.cmx
Printf.cmx already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_capabilities.cmx,
           src/mp_charset.cmx,
           src/mp_handshake.cmx,
           src/mp_packet.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_authentication ): cache miss: a product is not in build dir (src/mp_authentication.cmx)
======> src/mp_binary.cmx
src/mp_binary.cmx already built
======> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
======> src/mp_capabilities.cmx
src/mp_capabilities.cmx already built
======> src/mp_change_user.cmx
========> src/mp_change_user.mlpack
src/mp_change_user.mlpack already failed
========> src/mp_change_user.ml
src/mp_change_user.ml already built
========> src/mp_change_user.ml.depends
src/mp_change_user.ml.depends already built
========> src/mp_change_user.cmi
src/mp_change_user.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/mp_authentication.cmx
src/mp_authentication.cmx was suspended -> resuming
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_authentication.cmx src/mp_authentication.ml
resource_changed: src/mp_authentication.cmx
resource_changed: src/mp_authentication.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_authentication )
========> src/mp_handshake.cmx
src/mp_handshake.cmx already built
========> src/mp_string.cmx
src/mp_string.cmx already built
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_authentication.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_handshake.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_string.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/cryptokit.cmx
src/cryptokit.cmx already failed
========> src/Cryptokit.cmx
src/Cryptokit.cmx already failed
========> src/cryptokit.cmi
src/cryptokit.cmi already failed
========> src/Cryptokit.cmi
src/Cryptokit.cmi already failed
========> cryptokit.cmx
cryptokit.cmx already failed
========> Cryptokit.cmx
Cryptokit.cmx already failed
========> cryptokit.cmi
cryptokit.cmi already failed
========> Cryptokit.cmi
Cryptokit.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
========> src/mp_capabilities.cmx
src/mp_capabilities.cmx already built
========> src/mp_handshake.cmx
src/mp_handshake.cmx already built
========> src/mp_packet.cmx
src/mp_packet.cmx already built
========> src/mp_string.cmx
src/mp_string.cmx already built
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_capabilities.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_handshake.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_string.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/list.cmx
src/list.cmx already failed
========> src/List.cmx
src/List.cmx already failed
========> src/list.cmi
src/list.cmi already failed
========> src/List.cmi
src/List.cmi already failed
========> list.cmx
list.cmx already failed
========> List.cmx
List.cmx already failed
========> list.cmi
list.cmi already failed
========> List.cmi
List.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int32.cmx
src/int32.cmx already failed
========> src/Int32.cmx
src/Int32.cmx already failed
========> src/int32.cmi
src/int32.cmi already failed
========> src/Int32.cmi
src/Int32.cmi already failed
========> int32.cmx
int32.cmx already failed
========> Int32.cmx
Int32.cmx already failed
========> int32.cmi
int32.cmi already failed
========> Int32.cmi
Int32.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_capabilities.cmx
src/mp_capabilities.cmx already built
========> src/mp_charset.cmx
src/mp_charset.cmx already built
========> src/mp_packet.cmx
src/mp_packet.cmx already built
========> src/mp_string.cmx
src/mp_string.cmx already built
========> src/printf.cmx
src/printf.cmx already failed
========> src/Printf.cmx
src/Printf.cmx already failed
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmx
printf.cmx already failed
========> Printf.cmx
Printf.cmx already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_capabilities.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_charset.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_string.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
========> src/sys.cmx
src/sys.cmx already failed
========> src/Sys.cmx
src/Sys.cmx already failed
========> src/sys.cmi
src/sys.cmi already failed
========> src/Sys.cmi
src/Sys.cmi already failed
========> sys.cmx
sys.cmx already failed
========> Sys.cmx
Sys.cmx already failed
========> sys.cmi
sys.cmi already failed
========> Sys.cmi
Sys.cmi already failed
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_binary.cmx
src/mp_binary.cmx already built
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )"([
                                                                    src/mp_change_user.cmx;
                                                                    src/mp_change_user.o
                                                                    ]): "src/mp_binary.cmx"
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/char.cmx
src/char.cmx already failed
========> src/Char.cmx
src/Char.cmx already failed
========> src/char.cmi
src/char.cmi already failed
========> src/Char.cmi
src/Char.cmi already failed
========> char.cmx
char.cmx already failed
========> Char.cmx
Char.cmx already failed
========> char.cmi
char.cmi already failed
========> Char.cmi
Char.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/printf.cmx
src/printf.cmx already failed
========> src/Printf.cmx
src/Printf.cmx already failed
========> src/printf.cmi
src/printf.cmi already failed
========> src/Printf.cmi
src/Printf.cmi already failed
========> printf.cmx
printf.cmx already failed
========> Printf.cmx
Printf.cmx already failed
========> printf.cmi
printf.cmi already failed
========> Printf.cmi
Printf.cmi already failed
========> src/string.cmx
src/string.cmx already failed
========> src/String.cmx
src/String.cmx already failed
========> src/string.cmi
src/string.cmi already failed
========> src/String.cmi
src/String.cmi already failed
========> string.cmx
string.cmx already failed
========> String.cmx
String.cmx already failed
========> string.cmi
string.cmi already failed
========> String.cmi
String.cmi already failed
dyndeps: {.
           src/mp_authentication.cmx,
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_capabilities.cmx,
           src/mp_charset.cmx,
           src/mp_handshake.cmx,
           src/mp_packet.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_change_user ): cache miss: a product is not in build dir (src/mp_change_user.cmx)
======> src/mp_charset.cmx
src/mp_charset.cmx already built
======> src/mp_client.cmx
========> src/mp_client.mlpack
src/mp_client.mlpack already failed
========> src/mp_client.ml
src/mp_client.ml already built
========> src/mp_client.ml.depends
src/mp_client.ml.depends already built
========> src/mp_client.cmi
src/mp_client.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_client )
========> src/bitstring.cmx
src/bitstring.cmx already failed
========> src/Bitstring.cmx
src/Bitstring.cmx already failed
========> src/bitstring.cmi
src/bitstring.cmi already failed
========> src/Bitstring.cmi
src/Bitstring.cmi already failed
========> bitstring.cmx
bitstring.cmx already failed
========> Bitstring.cmx
Bitstring.cmx already failed
========> bitstring.cmi
bitstring.cmi already failed
========> Bitstring.cmi
Bitstring.cmi already failed
========> src/int64.cmx
src/int64.cmx already failed
========> src/Int64.cmx
src/Int64.cmx already failed
========> src/int64.cmi
src/int64.cmi already failed
========> src/Int64.cmi
src/Int64.cmi already failed
========> int64.cmx
int64.cmx already failed
========> Int64.cmx
Int64.cmx already failed
========> int64.cmi
int64.cmi already failed
========> Int64.cmi
Int64.cmi already failed
========> src/mp_authentication.cmx
src/mp_authentication.cmx already built
========> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
========> src/mp_capabilities.cmx
src/mp_capabilities.cmx already built
========> src/mp_change_user.cmx
src/mp_change_user.cmx was suspended -> resuming
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_change_user.cmx src/mp_change_user.ml
resource_changed: src/mp_change_user.cmx
resource_changed: src/mp_change_user.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_change_user )
========> src/mp_charset.cmx
src/mp_charset.cmx already built
========> src/mp_com.cmx
==========> src/mp_com.mlpack
src/mp_com.mlpack already failed
==========> src/mp_com.ml
src/mp_com.ml already built
==========> src/mp_com.ml.depends
src/mp_com.ml.depends already built
==========> src/mp_com.cmi
src/mp_com.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_com )
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/mp_packet.cmx
src/mp_packet.cmx already built
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_com )"([ src/mp_com.cmx;
                                                              src/mp_com.o ]): "src/mp_packet.cmx"
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/char.cmx
src/char.cmx already failed
==========> src/Char.cmx
src/Char.cmx already failed
==========> src/char.cmi
src/char.cmi already failed
==========> src/Char.cmi
src/Char.cmi already failed
==========> char.cmx
char.cmx already failed
==========> Char.cmx
Char.cmx already failed
==========> char.cmi
char.cmi already failed
==========> Char.cmi
Char.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
==========> src/sys.cmx
src/sys.cmx already failed
==========> src/Sys.cmx
src/Sys.cmx already failed
==========> src/sys.cmi
src/sys.cmi already failed
==========> src/Sys.cmi
src/Sys.cmi already failed
==========> sys.cmx
sys.cmx already failed
==========> Sys.cmx
Sys.cmx already failed
==========> sys.cmi
sys.cmi already failed
==========> Sys.cmi
Sys.cmi already failed
dyndeps: {. src/mp_packet.cmx .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_com ): cache miss: a product is not in build dir (src/mp_com.cmx)
========> src/mp_error_packet.cmx
==========> src/mp_error_packet.mlpack
src/mp_error_packet.mlpack already failed
==========> src/mp_error_packet.ml
src/mp_error_packet.ml already built
==========> src/mp_error_packet.ml.depends
src/mp_error_packet.ml.depends already built
==========> src/mp_error_packet.cmi
src/mp_error_packet.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_error_packet )
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/printf.cmx
src/printf.cmx already failed
==========> src/Printf.cmx
src/Printf.cmx already failed
==========> src/printf.cmi
src/printf.cmi already failed
==========> src/Printf.cmi
src/Printf.cmi already failed
==========> printf.cmx
printf.cmx already failed
==========> Printf.cmx
Printf.cmx already failed
==========> printf.cmi
printf.cmi already failed
==========> Printf.cmi
Printf.cmi already failed
==========> src/string.cmx
src/string.cmx already failed
==========> src/String.cmx
src/String.cmx already failed
==========> src/string.cmi
src/string.cmi already failed
==========> src/String.cmi
src/String.cmi already failed
==========> string.cmx
string.cmx already failed
==========> String.cmx
String.cmx already failed
==========> string.cmi
string.cmi already failed
==========> String.cmi
String.cmi already failed
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_error_packet ): cache miss: a product is not in build dir (src/mp_error_packet.cmx)
========> src/mp_execute.cmx
==========> src/mp_execute.mlpack
src/mp_execute.mlpack already failed
==========> src/mp_execute.ml
src/mp_execute.ml already built
==========> src/mp_execute.ml.depends
src/mp_execute.ml.depends already built
==========> src/mp_execute.cmi
src/mp_execute.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_execute )
==========> src/bitstring.cmx
src/bitstring.cmx already failed
==========> src/Bitstring.cmx
src/Bitstring.cmx already failed
==========> src/bitstring.cmi
src/bitstring.cmi already failed
==========> src/Bitstring.cmi
src/Bitstring.cmi already failed
==========> bitstring.cmx
bitstring.cmx already failed
==========> Bitstring.cmx
Bitstring.cmx already failed
==========> bitstring.cmi
bitstring.cmi already failed
==========> Bitstring.cmi
Bitstring.cmi already failed
==========> src/int64.cmx
src/int64.cmx already failed
==========> src/Int64.cmx
src/Int64.cmx already failed
==========> src/int64.cmi
src/int64.cmi already failed
==========> src/Int64.cmi
src/Int64.cmi already failed
==========> int64.cmx
int64.cmx already failed
==========> Int64.cmx
Int64.cmx already failed
==========> int64.cmi
int64.cmi already failed
==========> Int64.cmi
Int64.cmi already failed
==========> src/list.cmx
src/list.cmx already failed
==========> src/List.cmx
src/List.cmx already failed
==========> src/list.cmi
src/list.cmi already failed
==========> src/List.cmi
src/List.cmi already failed
==========> list.cmx
list.cmx already failed
==========> List.cmx
List.cmx already failed
==========> list.cmi
list.cmi already failed
==========> List.cmi
List.cmi already failed
==========> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
==========> src/mp_data.cmx
============> src/mp_data.mlpack
src/mp_data.mlpack already failed
============> src/mp_data.ml
src/mp_data.ml already built
============> src/mp_data.ml.depends
src/mp_data.ml.depends already built
============> src/mp_data.cmi
src/mp_data.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_data )
============> src/big_int.cmx
==============> src/big_int.mlpack
src/big_int.mlpack already failed
==============> src/big_int.ml
src/big_int.ml already failed
============> src/Big_int.cmx
==============> src/Big_int.mlpack
src/Big_int.mlpack already failed
==============> src/Big_int.ml
src/Big_int.ml already failed
============> src/big_int.cmi
src/big_int.cmi already failed
============> src/Big_int.cmi
src/Big_int.cmi already failed
============> big_int.cmx
==============> big_int.mlpack
big_int.mlpack already failed
==============> big_int.ml
big_int.ml already failed
============> Big_int.cmx
==============> Big_int.mlpack
Big_int.mlpack already failed
==============> Big_int.ml
Big_int.ml already failed
============> big_int.cmi
big_int.cmi already failed
============> Big_int.cmi
Big_int.cmi already failed
============> src/bitstring.cmx
src/bitstring.cmx already failed
============> src/Bitstring.cmx
src/Bitstring.cmx already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmx
bitstring.cmx already failed
============> Bitstring.cmx
Bitstring.cmx already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/buffer.cmx
==============> src/buffer.mlpack
src/buffer.mlpack already failed
==============> src/buffer.ml
src/buffer.ml already failed
============> src/Buffer.cmx
==============> src/Buffer.mlpack
src/Buffer.mlpack already failed
==============> src/Buffer.ml
src/Buffer.ml already failed
============> src/buffer.cmi
src/buffer.cmi already failed
============> src/Buffer.cmi
src/Buffer.cmi already failed
============> buffer.cmx
==============> buffer.mlpack
buffer.mlpack already failed
==============> buffer.ml
buffer.ml already failed
============> Buffer.cmx
==============> Buffer.mlpack
Buffer.mlpack already failed
==============> Buffer.ml
Buffer.ml already failed
============> buffer.cmi
buffer.cmi already failed
============> Buffer.cmi
Buffer.cmi already failed
============> src/int64.cmx
src/int64.cmx already failed
============> src/Int64.cmx
src/Int64.cmx already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmx
int64.cmx already failed
============> Int64.cmx
Int64.cmx already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/num.cmx
==============> src/num.mlpack
src/num.mlpack already failed
==============> src/num.ml
src/num.ml already failed
============> src/Num.cmx
==============> src/Num.mlpack
src/Num.mlpack already failed
==============> src/Num.ml
src/Num.ml already failed
============> src/num.cmi
src/num.cmi already failed
============> src/Num.cmi
src/Num.cmi already failed
============> num.cmx
==============> num.mlpack
num.mlpack already failed
==============> num.ml
num.ml already failed
============> Num.cmx
==============> Num.mlpack
Num.mlpack already failed
==============> Num.ml
Num.ml already failed
============> num.cmi
num.cmi already failed
============> Num.cmi
Num.cmi already failed
============> src/printf.cmx
src/printf.cmx already failed
============> src/Printf.cmx
src/Printf.cmx already failed
============> src/printf.cmi
src/printf.cmi already failed
============> src/Printf.cmi
src/Printf.cmi already failed
============> printf.cmx
printf.cmx already failed
============> Printf.cmx
Printf.cmx already failed
============> printf.cmi
printf.cmi already failed
============> Printf.cmi
Printf.cmi already failed
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_data ): cache miss: a product is not in build dir (src/mp_data.cmx)
==========> src/mp_data_process.cmx
============> src/mp_data_process.mlpack
src/mp_data_process.mlpack already failed
============> src/mp_data_process.ml
src/mp_data_process.ml already built
============> src/mp_data_process.ml.depends
src/mp_data_process.ml.depends already built
============> src/mp_data_process.cmi
src/mp_data_process.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_data_process )
============> src/big_int.cmx
src/big_int.cmx already failed
============> src/Big_int.cmx
src/Big_int.cmx already failed
============> src/big_int.cmi
src/big_int.cmi already failed
============> src/Big_int.cmi
src/Big_int.cmi already failed
============> big_int.cmx
big_int.cmx already failed
============> Big_int.cmx
Big_int.cmx already failed
============> big_int.cmi
big_int.cmi already failed
============> Big_int.cmi
Big_int.cmi already failed
============> src/bitstring.cmx
src/bitstring.cmx already failed
============> src/Bitstring.cmx
src/Bitstring.cmx already failed
============> src/bitstring.cmi
src/bitstring.cmi already failed
============> src/Bitstring.cmi
src/Bitstring.cmi already failed
============> bitstring.cmx
bitstring.cmx already failed
============> Bitstring.cmx
Bitstring.cmx already failed
============> bitstring.cmi
bitstring.cmi already failed
============> Bitstring.cmi
Bitstring.cmi already failed
============> src/buffer.cmx
src/buffer.cmx already failed
============> src/Buffer.cmx
src/Buffer.cmx already failed
============> src/buffer.cmi
src/buffer.cmi already failed
============> src/Buffer.cmi
src/Buffer.cmi already failed
============> buffer.cmx
buffer.cmx already failed
============> Buffer.cmx
Buffer.cmx already failed
============> buffer.cmi
buffer.cmi already failed
============> Buffer.cmi
Buffer.cmi already failed
============> src/int32.cmx
src/int32.cmx already failed
============> src/Int32.cmx
src/Int32.cmx already failed
============> src/int32.cmi
src/int32.cmi already failed
============> src/Int32.cmi
src/Int32.cmi already failed
============> int32.cmx
int32.cmx already failed
============> Int32.cmx
Int32.cmx already failed
============> int32.cmi
int32.cmi already failed
============> Int32.cmi
Int32.cmi already failed
============> src/int64.cmx
src/int64.cmx already failed
============> src/Int64.cmx
src/Int64.cmx already failed
============> src/int64.cmi
src/int64.cmi already failed
============> src/Int64.cmi
src/Int64.cmi already failed
============> int64.cmx
int64.cmx already failed
============> Int64.cmx
Int64.cmx already failed
============> int64.cmi
int64.cmi already failed
============> Int64.cmi
Int64.cmi already failed
============> src/list.cmx
src/list.cmx already failed
============> src/List.cmx
src/List.cmx already failed
============> src/list.cmi
src/list.cmi already failed
============> src/List.cmi
src/List.cmi already failed
============> list.cmx
list.cmx already failed
============> List.cmx
List.cmx already failed
============> list.cmi
list.cmi already failed
============> List.cmi
List.cmi already failed
============> src/mp_binary.cmx
src/mp_binary.cmx already built
============> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
============> src/mp_data.cmx
src/mp_data.cmx was suspended -> resuming
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_data.cmx src/mp_data.ml
resource_changed: src/mp_data.cmx
resource_changed: src/mp_data.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_data )
============> src/mp_data_binary.cmx
==============> src/mp_data_binary.mlpack
src/mp_data_binary.mlpack already failed
==============> src/mp_data_binary.ml
src/mp_data_binary.ml already built
==============> src/mp_data_binary.ml.depends
src/mp_data_binary.ml.depends already built
==============> src/mp_data_binary.cmi
src/mp_data_binary.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )
==============> src/big_int.cmx
src/big_int.cmx already failed
==============> src/Big_int.cmx
src/Big_int.cmx already failed
==============> src/big_int.cmi
src/big_int.cmi already failed
==============> src/Big_int.cmi
src/Big_int.cmi already failed
==============> big_int.cmx
big_int.cmx already failed
==============> Big_int.cmx
Big_int.cmx already failed
==============> big_int.cmi
big_int.cmi already failed
==============> Big_int.cmi
Big_int.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/buffer.cmx
src/buffer.cmx already failed
==============> src/Buffer.cmx
src/Buffer.cmx already failed
==============> src/buffer.cmi
src/buffer.cmi already failed
==============> src/Buffer.cmi
src/Buffer.cmi already failed
==============> buffer.cmx
buffer.cmx already failed
==============> Buffer.cmx
Buffer.cmx already failed
==============> buffer.cmi
buffer.cmi already failed
==============> Buffer.cmi
Buffer.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int32.cmx
src/int32.cmx already failed
==============> src/Int32.cmx
src/Int32.cmx already failed
==============> src/int32.cmi
src/int32.cmi already failed
==============> src/Int32.cmi
src/Int32.cmi already failed
==============> int32.cmx
int32.cmx already failed
==============> Int32.cmx
Int32.cmx already failed
==============> int32.cmi
int32.cmi already failed
==============> Int32.cmi
Int32.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
==============> src/mp_data.cmx
src/mp_data.cmx already built
==============> src/mp_field_packet.cmx
================> src/mp_field_packet.mlpack
src/mp_field_packet.mlpack already failed
================> src/mp_field_packet.ml
src/mp_field_packet.ml already built
================> src/mp_field_packet.ml.depends
src/mp_field_packet.ml.depends already built
================> src/mp_field_packet.cmi
src/mp_field_packet.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )
================> src/bitstring.cmx
src/bitstring.cmx already failed
================> src/Bitstring.cmx
src/Bitstring.cmx already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmx
bitstring.cmx already failed
================> Bitstring.cmx
Bitstring.cmx already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/char.cmx
src/char.cmx already failed
================> src/Char.cmx
src/Char.cmx already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmx
char.cmx already failed
================> Char.cmx
Char.cmx already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/int64.cmx
src/int64.cmx already failed
================> src/Int64.cmx
src/Int64.cmx already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmx
int64.cmx already failed
================> Int64.cmx
Int64.cmx already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/list.cmx
src/list.cmx already failed
================> src/List.cmx
src/List.cmx already failed
================> src/list.cmi
src/list.cmi already failed
================> src/List.cmi
src/List.cmi already failed
================> list.cmx
list.cmx already failed
================> List.cmx
List.cmx already failed
================> list.cmi
list.cmi already failed
================> List.cmi
List.cmi already failed
================> src/mp_binary.cmx
src/mp_binary.cmx already built
================> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
================> src/mp_packet.cmx
src/mp_packet.cmx already built
================> src/mp_protocol.cmx
==================> src/mp_protocol.mlpack
src/mp_protocol.mlpack already failed
==================> src/mp_protocol.ml
src/mp_protocol.ml already built
==================> src/mp_protocol.ml.depends
src/mp_protocol.ml.depends already built
==================> src/mp_protocol.cmi
src/mp_protocol.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_protocol )
dyndeps: {.  .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_protocol ): cache miss: a product is not in build dir (src/mp_protocol.cmx)
================> src/mp_string.cmx
src/mp_string.cmx already built
================> src/printf.cmx
src/printf.cmx already failed
================> src/Printf.cmx
src/Printf.cmx already failed
================> src/printf.cmi
src/printf.cmi already failed
================> src/Printf.cmi
src/Printf.cmi already failed
================> printf.cmx
printf.cmx already failed
================> Printf.cmx
Printf.cmx already failed
================> printf.cmi
printf.cmi already failed
================> Printf.cmi
Printf.cmi already failed
================> src/string.cmx
src/string.cmx already failed
================> src/String.cmx
src/String.cmx already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmx
string.cmx already failed
================> String.cmx
String.cmx already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_protocol.cmx src/mp_protocol.ml
resource_changed: src/mp_protocol.cmx
resource_changed: src/mp_protocol.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_protocol )
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_binary.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_protocol.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_string.cmx"
================> src/bitstring.cmx
src/bitstring.cmx already failed
================> src/Bitstring.cmx
src/Bitstring.cmx already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmx
bitstring.cmx already failed
================> Bitstring.cmx
Bitstring.cmx already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/char.cmx
src/char.cmx already failed
================> src/Char.cmx
src/Char.cmx already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmx
char.cmx already failed
================> Char.cmx
Char.cmx already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/int64.cmx
src/int64.cmx already failed
================> src/Int64.cmx
src/Int64.cmx already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmx
int64.cmx already failed
================> Int64.cmx
Int64.cmx already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/printf.cmx
src/printf.cmx already failed
================> src/Printf.cmx
src/Printf.cmx already failed
================> src/printf.cmi
src/printf.cmi already failed
================> src/Printf.cmi
src/Printf.cmi already failed
================> printf.cmx
printf.cmx already failed
================> Printf.cmx
Printf.cmx already failed
================> printf.cmi
printf.cmi already failed
================> Printf.cmi
Printf.cmi already failed
================> src/string.cmx
src/string.cmx already failed
================> src/String.cmx
src/String.cmx already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmx
string.cmx already failed
================> String.cmx
String.cmx already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
================> src/bitstring.cmx
src/bitstring.cmx already failed
================> src/Bitstring.cmx
src/Bitstring.cmx already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmx
bitstring.cmx already failed
================> Bitstring.cmx
Bitstring.cmx already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/char.cmx
src/char.cmx already failed
================> src/Char.cmx
src/Char.cmx already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmx
char.cmx already failed
================> Char.cmx
Char.cmx already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/string.cmx
src/string.cmx already failed
================> src/String.cmx
src/String.cmx already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmx
string.cmx already failed
================> String.cmx
String.cmx already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
================> src/sys.cmx
src/sys.cmx already failed
================> src/Sys.cmx
src/Sys.cmx already failed
================> src/sys.cmi
src/sys.cmi already failed
================> src/Sys.cmi
src/Sys.cmi already failed
================> sys.cmx
sys.cmx already failed
================> Sys.cmx
Sys.cmx already failed
================> sys.cmi
sys.cmi already failed
================> Sys.cmi
Sys.cmi already failed
================> src/bitstring.cmx
src/bitstring.cmx already failed
================> src/Bitstring.cmx
src/Bitstring.cmx already failed
================> src/bitstring.cmi
src/bitstring.cmi already failed
================> src/Bitstring.cmi
src/Bitstring.cmi already failed
================> bitstring.cmx
bitstring.cmx already failed
================> Bitstring.cmx
Bitstring.cmx already failed
================> bitstring.cmi
bitstring.cmi already failed
================> Bitstring.cmi
Bitstring.cmi already failed
================> src/char.cmx
src/char.cmx already failed
================> src/Char.cmx
src/Char.cmx already failed
================> src/char.cmi
src/char.cmi already failed
================> src/Char.cmi
src/Char.cmi already failed
================> char.cmx
char.cmx already failed
================> Char.cmx
Char.cmx already failed
================> char.cmi
char.cmi already failed
================> Char.cmi
Char.cmi already failed
================> src/int64.cmx
src/int64.cmx already failed
================> src/Int64.cmx
src/Int64.cmx already failed
================> src/int64.cmi
src/int64.cmi already failed
================> src/Int64.cmi
src/Int64.cmi already failed
================> int64.cmx
int64.cmx already failed
================> Int64.cmx
Int64.cmx already failed
================> int64.cmi
int64.cmi already failed
================> Int64.cmi
Int64.cmi already failed
================> src/mp_binary.cmx
src/mp_binary.cmx already built
================> src/string.cmx
src/string.cmx already failed
================> src/String.cmx
src/String.cmx already failed
================> src/string.cmi
src/string.cmi already failed
================> src/String.cmi
src/String.cmi already failed
================> string.cmx
string.cmx already failed
================> String.cmx
String.cmx already failed
================> string.cmi
string.cmi already failed
================> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )"(
  [ src/mp_field_packet.cmx; src/mp_field_packet.o ]): "src/mp_binary.cmx"
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_packet.cmx,
           src/mp_protocol.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet ): cache miss: a product is not in build dir (src/mp_field_packet.cmx)
==============> src/num.cmx
src/num.cmx already failed
==============> src/Num.cmx
src/Num.cmx already failed
==============> src/num.cmi
src/num.cmi already failed
==============> src/Num.cmi
src/Num.cmi already failed
==============> num.cmx
num.cmx already failed
==============> Num.cmx
Num.cmx already failed
==============> num.cmi
num.cmi already failed
==============> Num.cmi
Num.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_field_packet.cmx src/mp_field_packet.ml
resource_changed: src/mp_field_packet.cmx
resource_changed: src/mp_field_packet.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_field_packet )
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_data.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_field_packet.cmx"
==============> src/big_int.cmx
src/big_int.cmx already failed
==============> src/Big_int.cmx
src/Big_int.cmx already failed
==============> src/big_int.cmi
src/big_int.cmi already failed
==============> src/Big_int.cmi
src/Big_int.cmi already failed
==============> big_int.cmx
big_int.cmx already failed
==============> Big_int.cmx
Big_int.cmx already failed
==============> big_int.cmi
big_int.cmi already failed
==============> Big_int.cmi
Big_int.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/buffer.cmx
src/buffer.cmx already failed
==============> src/Buffer.cmx
src/Buffer.cmx already failed
==============> src/buffer.cmi
src/buffer.cmi already failed
==============> src/Buffer.cmi
src/Buffer.cmi already failed
==============> buffer.cmx
buffer.cmx already failed
==============> Buffer.cmx
Buffer.cmx already failed
==============> buffer.cmi
buffer.cmi already failed
==============> Buffer.cmi
Buffer.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/num.cmx
src/num.cmx already failed
==============> src/Num.cmx
src/Num.cmx already failed
==============> src/num.cmi
src/num.cmi already failed
==============> src/Num.cmi
src/Num.cmi already failed
==============> num.cmx
num.cmx already failed
==============> Num.cmx
Num.cmx already failed
==============> num.cmi
num.cmi already failed
==============> Num.cmi
Num.cmi already failed
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
==============> src/mp_packet.cmx
src/mp_packet.cmx already built
==============> src/mp_protocol.cmx
src/mp_protocol.cmx already built
==============> src/mp_string.cmx
src/mp_string.cmx already built
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_binary.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_protocol.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_string.cmx"
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/sys.cmx
src/sys.cmx already failed
==============> src/Sys.cmx
src/Sys.cmx already failed
==============> src/sys.cmi
src/sys.cmi already failed
==============> src/Sys.cmi
src/Sys.cmi already failed
==============> sys.cmx
sys.cmx already failed
==============> Sys.cmx
Sys.cmx already failed
==============> sys.cmi
sys.cmi already failed
==============> Sys.cmi
Sys.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary )"([
                                                                    src/mp_data_binary.cmx;
                                                                    src/mp_data_binary.o
                                                                    ]): "src/mp_binary.cmx"
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_data.cmx,
           src/mp_field_packet.cmx,
           src/mp_packet.cmx,
           src/mp_protocol.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_data_binary ): cache miss: a product is not in build dir (src/mp_data_binary.cmx)
============> src/mp_data_simple.cmx
==============> src/mp_data_simple.mlpack
src/mp_data_simple.mlpack already failed
==============> src/mp_data_simple.ml
src/mp_data_simple.ml already built
==============> src/mp_data_simple.ml.depends
src/mp_data_simple.ml.depends already built
==============> src/mp_data_simple.cmi
src/mp_data_simple.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )
==============> src/array.cmx
================> src/array.mlpack
src/array.mlpack already failed
================> src/array.ml
src/array.ml already failed
==============> src/Array.cmx
================> src/Array.mlpack
src/Array.mlpack already failed
================> src/Array.ml
src/Array.ml already failed
==============> src/array.cmi
src/array.cmi already failed
==============> src/Array.cmi
src/Array.cmi already failed
==============> array.cmx
================> array.mlpack
array.mlpack already failed
================> array.ml
array.ml already failed
==============> Array.cmx
================> Array.mlpack
Array.mlpack already failed
================> Array.ml
Array.ml already failed
==============> array.cmi
array.cmi already failed
==============> Array.cmi
Array.cmi already failed
==============> src/big_int.cmx
src/big_int.cmx already failed
==============> src/Big_int.cmx
src/Big_int.cmx already failed
==============> src/big_int.cmi
src/big_int.cmi already failed
==============> src/Big_int.cmi
src/Big_int.cmi already failed
==============> big_int.cmx
big_int.cmx already failed
==============> Big_int.cmx
Big_int.cmx already failed
==============> big_int.cmi
big_int.cmi already failed
==============> Big_int.cmi
Big_int.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/buffer.cmx
src/buffer.cmx already failed
==============> src/Buffer.cmx
src/Buffer.cmx already failed
==============> src/buffer.cmi
src/buffer.cmi already failed
==============> src/Buffer.cmi
src/Buffer.cmi already failed
==============> buffer.cmx
buffer.cmx already failed
==============> Buffer.cmx
Buffer.cmx already failed
==============> buffer.cmi
buffer.cmi already failed
==============> Buffer.cmi
Buffer.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_data.cmx
src/mp_data.cmx already built
==============> src/mp_field_packet.cmx
src/mp_field_packet.cmx already built
==============> src/num.cmx
src/num.cmx already failed
==============> src/Num.cmx
src/Num.cmx already failed
==============> src/num.cmi
src/num.cmi already failed
==============> src/Num.cmi
src/Num.cmi already failed
==============> num.cmx
num.cmx already failed
==============> Num.cmx
Num.cmx already failed
==============> num.cmi
num.cmi already failed
==============> Num.cmi
Num.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_data.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_field_packet.cmx"
==============> src/big_int.cmx
src/big_int.cmx already failed
==============> src/Big_int.cmx
src/Big_int.cmx already failed
==============> src/big_int.cmi
src/big_int.cmi already failed
==============> src/Big_int.cmi
src/Big_int.cmi already failed
==============> big_int.cmx
big_int.cmx already failed
==============> Big_int.cmx
Big_int.cmx already failed
==============> big_int.cmi
big_int.cmi already failed
==============> Big_int.cmi
Big_int.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/buffer.cmx
src/buffer.cmx already failed
==============> src/Buffer.cmx
src/Buffer.cmx already failed
==============> src/buffer.cmi
src/buffer.cmi already failed
==============> src/Buffer.cmi
src/Buffer.cmi already failed
==============> buffer.cmx
buffer.cmx already failed
==============> Buffer.cmx
Buffer.cmx already failed
==============> buffer.cmi
buffer.cmi already failed
==============> Buffer.cmi
Buffer.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/num.cmx
src/num.cmx already failed
==============> src/Num.cmx
src/Num.cmx already failed
==============> src/num.cmi
src/num.cmi already failed
==============> src/Num.cmi
src/Num.cmi already failed
==============> num.cmx
num.cmx already failed
==============> Num.cmx
Num.cmx already failed
==============> num.cmi
num.cmi already failed
==============> Num.cmi
Num.cmi already failed
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
==============> src/mp_packet.cmx
src/mp_packet.cmx already built
==============> src/mp_protocol.cmx
src/mp_protocol.cmx already built
==============> src/mp_string.cmx
src/mp_string.cmx already built
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_binary.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_protocol.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_string.cmx"
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/sys.cmx
src/sys.cmx already failed
==============> src/Sys.cmx
src/Sys.cmx already failed
==============> src/sys.cmi
src/sys.cmi already failed
==============> src/Sys.cmi
src/Sys.cmi already failed
==============> sys.cmx
sys.cmx already failed
==============> Sys.cmx
Sys.cmx already failed
==============> sys.cmi
sys.cmi already failed
==============> Sys.cmi
Sys.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple )"([
                                                                    src/mp_data_simple.cmx;
                                                                    src/mp_data_simple.o
                                                                    ]): "src/mp_binary.cmx"
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_data.cmx,
           src/mp_field_packet.cmx,
           src/mp_packet.cmx,
           src/mp_protocol.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_data_simple ): cache miss: a product is not in build dir (src/mp_data_simple.cmx)
============> src/mp_raw_data.cmx
==============> src/mp_raw_data.mlpack
src/mp_raw_data.mlpack already failed
==============> src/mp_raw_data.ml
src/mp_raw_data.ml already built
==============> src/mp_raw_data.ml.depends
src/mp_raw_data.ml.depends already built
==============> src/mp_raw_data.cmi
src/mp_raw_data.cmi already built
start rule ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/mp_com.cmx
src/mp_com.cmx was suspended -> resuming
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_com.cmx src/mp_com.ml
resource_changed: src/mp_com.cmx
resource_changed: src/mp_com.o
end rule ocaml: ml & cmi -> cmx & o (%=src/mp_com )
==============> src/mp_field_packet.cmx
src/mp_field_packet.cmx already built
==============> src/mp_string.cmx
src/mp_string.cmx already built
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_binary.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_com.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_field_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_string.cmx"
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/mp_packet.cmx
src/mp_packet.cmx already built
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_packet.cmx"
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
==============> src/sys.cmx
src/sys.cmx already failed
==============> src/Sys.cmx
src/Sys.cmx already failed
==============> src/sys.cmi
src/sys.cmi already failed
==============> src/Sys.cmi
src/Sys.cmi already failed
==============> sys.cmx
sys.cmx already failed
==============> Sys.cmx
Sys.cmx already failed
==============> sys.cmi
sys.cmi already failed
==============> Sys.cmi
Sys.cmi already failed
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/list.cmx
src/list.cmx already failed
==============> src/List.cmx
src/List.cmx already failed
==============> src/list.cmi
src/list.cmi already failed
==============> src/List.cmi
src/List.cmi already failed
==============> list.cmx
list.cmx already failed
==============> List.cmx
List.cmx already failed
==============> list.cmi
list.cmi already failed
==============> List.cmi
List.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/mp_bitstring.cmx
src/mp_bitstring.cmx already built
==============> src/mp_packet.cmx
src/mp_packet.cmx already built
==============> src/mp_protocol.cmx
src/mp_protocol.cmx already built
==============> src/mp_string.cmx
src/mp_string.cmx already built
==============> src/printf.cmx
src/printf.cmx already failed
==============> src/Printf.cmx
src/Printf.cmx already failed
==============> src/printf.cmi
src/printf.cmi already failed
==============> src/Printf.cmi
src/Printf.cmi already failed
==============> printf.cmx
printf.cmx already failed
==============> Printf.cmx
Printf.cmx already failed
==============> printf.cmi
printf.cmi already failed
==============> Printf.cmi
Printf.cmi already failed
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_binary.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_bitstring.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_packet.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_protocol.cmx"
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_string.cmx"
==============> src/bitstring.cmx
src/bitstring.cmx already failed
==============> src/Bitstring.cmx
src/Bitstring.cmx already failed
==============> src/bitstring.cmi
src/bitstring.cmi already failed
==============> src/Bitstring.cmi
src/Bitstring.cmi already failed
==============> bitstring.cmx
bitstring.cmx already failed
==============> Bitstring.cmx
Bitstring.cmx already failed
==============> bitstring.cmi
bitstring.cmi already failed
==============> Bitstring.cmi
Bitstring.cmi already failed
==============> src/char.cmx
src/char.cmx already failed
==============> src/Char.cmx
src/Char.cmx already failed
==============> src/char.cmi
src/char.cmi already failed
==============> src/Char.cmi
src/Char.cmi already failed
==============> char.cmx
char.cmx already failed
==============> Char.cmx
Char.cmx already failed
==============> char.cmi
char.cmi already failed
==============> Char.cmi
Char.cmi already failed
==============> src/int64.cmx
src/int64.cmx already failed
==============> src/Int64.cmx
src/Int64.cmx already failed
==============> src/int64.cmi
src/int64.cmi already failed
==============> src/Int64.cmi
src/Int64.cmi already failed
==============> int64.cmx
int64.cmx already failed
==============> Int64.cmx
Int64.cmx already failed
==============> int64.cmi
int64.cmi already failed
==============> Int64.cmi
Int64.cmi already failed
==============> src/mp_binary.cmx
src/mp_binary.cmx already built
==============> src/string.cmx
src/string.cmx already failed
==============> src/String.cmx
src/String.cmx already failed
==============> src/string.cmi
src/string.cmi already failed
==============> src/String.cmi
src/String.cmi already failed
==============> string.cmx
string.cmx already failed
==============> String.cmx
String.cmx already failed
==============> string.cmi
string.cmi already failed
==============> String.cmi
String.cmi already failed
new dyndep for "ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data )"([
                                                                   src/mp_raw_data.cmx;
                                                                   src/mp_raw_data.o
                                                                   ]): "src/mp_binary.cmx"
dyndeps: {.
           src/mp_binary.cmx,
           src/mp_bitstring.cmx,
           src/mp_com.cmx,
           src/mp_field_packet.cmx,
           src/mp_packet.cmx,
           src/mp_protocol.cmx,
           src/mp_string.cmx
         .}
mid rule ocaml: ml & cmi -> cmx & o (%=src/mp_raw_data ): cache miss: a product is not in build dir (src/mp_raw_data.cmx)
============> src/num.cmx
src/num.cmx already failed
============> src/Num.cmx
src/Num.cmx already failed
============> src/num.cmi
src/num.cmi already failed
============> src/Num.cmi
src/Num.cmi already failed
============> num.cmx
num.cmx already failed
============> Num.cmx
Num.cmx already failed
============> num.cmi
num.cmi already failed
============> Num.cmi
Num.cmi already failed
============> src/string.cmx
src/string.cmx already failed
============> src/String.cmx
src/String.cmx already failed
============> src/string.cmi
src/string.cmi already failed
============> src/String.cmi
src/String.cmi already failed
============> string.cmx
string.cmx already failed
============> String.cmx
String.cmx already failed
============> string.cmi
string.cmi already failed
============> String.cmi
String.cmi already failed
>>> PARALLEL: 3
ocamlfind ocamlopt -c -syntax camlp4o -package num -package cryptokit -package bitstring -package bitstring.syntax -syntax bitstring.syntax -for-pack Mysql_protocol -package unix -I src -o src/mp_data_binary.cmx src/mp_data_binary.ml
