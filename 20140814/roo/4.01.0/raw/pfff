++ opam install pfff -e ubuntu
+ depext=
+ echo Ubuntu depexts:
+ '[' '' '!=' '' ']'
Ubuntu depexts:
++ opam install pfff -e source,linux
+ srcext=
+ echo Ubuntu srcexts:
+ '[' '' '!=' '' ']'
+ opam install pfff
Ubuntu srcexts:
The following actions will be performed:
 - install pfff.0.27.3
1 to install | 0 to reinstall | 0 to upgrade | 0 to downgrade | 0 to remove

=-=-= Installing pfff.0.27.3 =-=-=
default    Synchronizing with /home/opam/opam-repository/archives/pfff.0.27.3+opam.tar.gz
sending incremental file list
pfff.0.27.3+opam.tar.gz

sent 16,530,599 bytes  received 35 bytes  33,061,268.00 bytes/sec
total size is 16,526,438  speedup is 1.00
Building pfff.0.27.3:
  ./configure --novisual --nocmt --nobytecode
  make depend
  make
  make opt
  make install-findlib
Checking your configuration.

OCaml (the wonderful language) is present.
make (gnu version) is present.

pfff target prefix: /usr/local (you can use --prefix to override it)
Generating Makefile.config (VISUAL=0, BYTECODE=0, CMT=0) (see also configure --help)
Generating commons/features.ml
Generating globals/config_pfff.ml
All seems fine for pfff.

To compile pfff type:
  $ make depend
  $ make 

Then, to test pfff simply type:
  $ ./pfff -dump_php demos/foo.php

If you want to use the analysis framework and code visualization tools
see install.txt or type ./configure --help

ocamldep -pp "cpp -DFEATURE_BYTECODE=0 -DFEATURE_CMT=0" -I commons -I external/jsonwheel -I external/ocamlgraph -I globals -I h_version-control -I h_visualization -I h_files-format -I h_program-lang -I graph_code -I h_program-visual -I matcher -I lang_ml/parsing -I lang_ml/analyze -I lang_nw/parsing -I lang_nw/analyze -I lang_lisp/parsing -I lang_lisp/analyze -I lang_haskell/parsing -I lang_haskell/analyze -I lang_php/parsing -I lang_php/matcher -I lang_php/pretty -I lang_sql/parsing -I lang_js/parsing -I lang_js/analyze -I lang_cpp/parsing -I lang_cpp/analyze -I lang_c/parsing -I lang_c/analyze -I lang_objc/parsing -I lang_objc/analyze -I lang_clang/parsing -I lang_clang/analyze -I lang_java/parsing -I lang_java/analyze -I lang_python/parsing -I lang_python/analyze -I lang_csharp/parsing -I lang_csharp/analyze -I lang_opa/parsing -I lang_opa/analyze -I lang_erlang/parsing -I lang_erlang/analyze -I lang_php/analyze -I lang_php/analyze/foundation -I lang_php/analyze/checker -I lang_php/analyze/tools -I lang_php/analyze/qa_test -I lang_html/parsing -I lang_html/analyze -I lang_css/parsing -I lang_web/parsing -I lang_text -I demos -I commons/ocamlextra -I commons/ocollection  *.mli *.ml > .depend
main_codegraph.ml:22:60: warning: missing terminating " character [enabled by default]
  * Structure Matrix (DSM). This should help understand the "software
                                                            ^
main_codegraph.ml:23:16: warning: missing terminating " character [enabled by default]
  * architecture" of a project and assist in refactoring it.
                ^
main_codegraph.ml:48:15: warning: missing terminating ' character [enabled by default]
  *      we don't understand why there exists a dependency.
               ^
main_codegraph.ml:57:67: warning: missing terminating ' character [enabled by default]
  * - Lattix, the startup where the original paper on DSM at OOPSLA'05
                                                                   ^
main_codegraph.ml:91:60: warning: missing terminating ' character [enabled by default]
  *    better than UML diagrams (I think after reading Harel's papers on
                                                            ^
main_codegraph.ml:118:34: warning: missing terminating ' character [enabled by default]
  *    scale very well for www. It's ok for pfff, but even for 
                                  ^
main_codegraph.ml:127:47: warning: missing terminating ' character [enabled by default]
  *    a tree when looked locally (AST), but it's really a graph
                                               ^
main_codegraph.ml:146:66: warning: missing terminating ' character [enabled by default]
  *    ocamldoc fails. Also there is no package "projection" so it's 
                                                                  ^
main_codegraph.ml:154:9: warning: missing terminating ' character [enabled by default]
  *    it's also good to see things without the reduction (especially
         ^
main_codegraph.ml:160:9: warning: missing terminating ' character [enabled by default]
  *    It's somehow covered by the strongly-connected + coloring in gephi.
         ^
main_codemap.ml:25:17: warning: missing terminating ' character [enabled by default]
  *  - get a bird's eye view of all the code (hence treemaps)
                 ^
main_codemap.ml:26:17: warning: missing terminating ' character [enabled by default]
  *  - get a bird's eye view of a file (hence code thumbnails)
                 ^
main_codemap.ml:65:46: warning: missing terminating ' character [enabled by default]
  *  - sublime, has thumbnails, but people don't really care about it
                                              ^
main_codemap.ml:94:55: warning: missing terminating ' character [enabled by default]
  *    as well as not overriden parent methods.  We don't want autocomplete
                                                       ^
main_codemap.ml:468:68: warning: missing terminating ' character [enabled by default]
  * here. Here it's for ... well it's for nothing I think because it's not 
                                                                    ^
main_scheck.ml:119:22: warning: missing terminating ' character [enabled by default]
  * I put 5 because it's fast enough at depth 5, and 
                      ^
main_scheck.ml:120:14: warning: missing terminating ' character [enabled by default]
  * I think it's good enough as it is probably bad for a file to use
              ^
main_sgrep.ml:112:13: warning: missing terminating ' character [enabled by default]
     let file' = Common2.relative_to_absolute file in 
             ^
main_sgrep.ml:113:30: warning: missing terminating ' character [enabled by default]
     Common.readable root file', line
                              ^
main_spatch.ml:276:70: warning: missing terminating ' character [enabled by default]
   (* optimisation; if a file does not contain certain keywords we don't
                                                                      ^
main_spatch.ml:286:60: warning: missing terminating ' character [enabled by default]
   (* xhp and transformation was not mixing well, but now it's better
                                                            ^
main_spatch.ml:480:33: warning: missing terminating " character [enabled by default]
    *            i_15, [XhpText(("
                                 ^
main_spatch.ml:482:8: warning: missing terminating " character [enabled by default]
    *   ", i_16))],
        ^
main_spatch.ml:538:30: warning: missing terminating ' character [enabled by default]
  * a la lex-pass. Or maybe it's better to add support in the DSL directly
                              ^
main_test.ml:178:11: warning: missing terminating ' character [enabled by default]
     let db' = 
           ^
main_test.ml:180:35: warning: missing terminating ' character [enabled by default]
     Database_code.save_database db' output
                                   ^
